#! /usr/bin/env bash

# define constants
BASH_DIR="${HOME}/scripts/bash"
GIT_LOCATION="${HOME}/macOS-config/"
EMAIL="jakewilliami@icloud.com"
REPO_NAME='macOS-config'
BRANCH='master'

# define variables
OUT_DIR="${3}"
OPT_PASSED=false
if [[ $1 =~ ^\-.+ ]] # checks to see if first argument begins with a minus (i.e., is an option) as we cannot assess $OPTIND before options are called
then
    OPT_PASSED=true
fi
if [[ $OPT_PASSED == true  ]]
then
    INPUT_FILE="${2}"
else
    INPUT_FILE="${1}"
fi


# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh


# get kernel-specific dependencies
case $KERNEL in
    Darwin)
        is-library-then-install "${PYTHON3}" "${BITWARDEN_CLI}" "${GREP}"
        ;;
    Linux)
        is-library-then-install "${PYTHON3}" "${PIP3}"
        ;;
esac

# get os-specific dependencies
case $OS in
    debian)
        is-library-then-install "${SNAP}" && \
        sudo ln -s /var/lib/snapd/snap /snap && \
        sudo snap install bw
        ;;
    arch)
        echo hi
        aur_install "${NVM}" 'https://aur.archlinux.org/cgit/aur.git/snapshot/nvm.tar.gz'
        aur_install "${BITWARDEN_CLI}" 'https://aur.archlinux.org/cgit/aur.git/snapshot/bitwarden-cli.tar.gz'
        ;;
    fedora)
        is-library-then-install "${SNAP}" && \
        sudo ln -s /var/lib/snapd/snap /snap && \
        sudo snap install bw
        ;;
esac


# Help
display_help() {
    help_start 'curl-raw [-ho] [relative path to file...] [output directory...]' 'The present script will curl a raw file from my private macOS-config repo'
    help_commands '-o' '--output' '2' 'Pushes `curl`ed file into given' 'o' 'utput' 'directory.'
    help_help '2'
    help_examples 'Running `curl-raw dotfiles/.bash/.bashrc` from the macOS-config directory will update your `~/macOS-config/dotfiles/.bash/.bashrc` file.'
    help_examples 'Running `curl-raw -o dotfiles/.bash/.bashrc path/to/output/dir/`'
    clean-exit
}


pTouch() {
  for p do
    _dir="$(dirname -- "$p")"
    mkdir -p -- "$_dir" &&
      touch -- "$p"
  done
}


get_access_token() {
    # set booleans
    LOGIN=false
    # set counters
    LOGIN_TRY=0
    # make new current session
    bw --quiet logout
    # exit script if password is incorrect thrice
    while [[ ${LOGIN} == false ]]
    do
        if [[ "${LOGIN_TRY}" -lt "3" ]]
        then
            if [[ "${LOGIN_TRY}" -gt 0 ]]
            then
                echo -e "${BYELLOW}You have $((3-LOGIN_TRY)) attemps left.${NORM}"
            else
                echo -e "${BBLUE}===>${NORM}${BWHITE}\tRenewing BitWarden session and generating access token.  You have $((3-LOGIN_TRY)) attempts at logging into your BitWarden account.${NORM}"
            fi
            bw login --raw "${EMAIL}" > "${GIT_LOCATION}"/temp.d/bw-access-token && \
                LOGIN=true
            LOGIN_TRY=$((LOGIN_TRY+1))
        else
            echo -e "${BRED}Incorrect password.  Exiting.${NORM}"
            clean-exit
        fi
    done
    # sync vault
    echo -e "${BBLUE}===>${NORM}${BWHITE}\tSyncing vault.${NORM}"
    bw --quiet sync
    # generate gitlab bw id
    echo -e "${BBLUE}===>${NORM}${BWHITE}\tObtaining GitLab Access Token and project ID.${NORM}"
    bw list items --session $(cat "${GIT_LOCATION}/"temp.d/bw-access-token) --search GitLab | \
        jq --raw-output '.[] | .id' > \
        "${GIT_LOCATION}"/temp.d/gitlab-id
    # get access token from gitlab
    bw --session $(cat "${GIT_LOCATION}/"temp.d/bw-access-token) get item $(cat "${GIT_LOCATION}"/temp.d/gitlab-id) | \
        jq --raw-output '.fields | .[] | select(.name=="Personal Access Token for jakewilliami") | .value' > \
        "${GIT_LOCATION}/temp.d/gl-access-token"
    # get project id from gitlab
    bw --session $(cat "${GIT_LOCATION}/"temp.d/bw-access-token) get item $(cat "${GIT_LOCATION}"/temp.d/gitlab-id) | \
        jq --raw-output '.fields | .[] | select(.name=="Project ID for '$REPO_NAME'") | .value' > \
        "${GIT_LOCATION}/temp.d/gl-project-id"
}


# turn file path into something gitlab will understand
process_input() {
    LONG_PATH=$(echo $(pwd)/${INPUT_FILE})
    INPUT_FILE_PROCESSED=$(echo "${INPUT_FILE}" | sed 's:/:%2F:g')
}


# curl the file if it exists from the specified gitlab repo
curl_raw() {
    # define a 'full path' variable either as their input if they didn't give an option, or as their output directory given an option
    if [[ $OPT_PASSED == true ]]
    then
        FULL_PATH="${1}/${LONG_PATH##*/}"
    else
        FULL_PATH="${LONG_PATH}"
    fi
    if [[ -e "${FULL_PATH}" ]]
    then
        echo -e "${BYELLOW}===>${NORM}${ITYELLOW}\tOverwriting ${FULL_PATH} from repository.  Press control + C within five seconds to cancel.${NORM}" && \
        sleep 5
    else
        echo -e "${BBLUE}===>${NORM}${BWHITE}\tCreating ${FULL_PATH}.${NORM}" && \
        pTouch "${FULL_PATH}"
    fi
    if [ ! $(curl --raw --silent --show-error --write-out '%{http_code}' --header "PRIVATE-TOKEN: $(cat "${GIT_LOCATION}/temp.d/gl-access-token")" --url https://gitlab.com/api/v4/projects/$(cat "${GIT_LOCATION}/temp.d/gl-project-id")/repository/files/"${INPUT_FILE_PROCESSED}"/raw?ref="${BRANCH}" --output "${FULL_PATH}") == '404' ] # takes first arg as output
    then
        echo -e "${BGREEN}Output written to ${FULL_PATH}.${NORM}"
    else
        echo -e "${BRED}Could not find input file.  Removing file \`${FULL_PATH##*/}\` and any empty parents.${NORM}"
        rm "${FULL_PATH}" > /dev/null 2>&1
        # clean up created file and empty parent directories
        COUNT_SEP="${FULL_PATH//[^\/]}"
        for countDir in $(seq 2 $((${#COUNT_SEP}+1)))
        do
            PARENT_DIR=$(echo ${FULL_PATH} | awk -v variable="${countDir}" -F/ '{ print $variable }')
            if [ -z "$(ls -A "${FULL_PATH%/${PARENT_DIR}*}/" > /dev/null 2>&1)" ]
            then
                rm -d "${FULL_PATH%/${PARENT_DIR}*}/" > /dev/null 2>&1
            fi
        done
    fi
}


output_function() {
    if ! ls "${OUT_DIR}" > /dev/null 2>&1
    then
        mkdir -p "${OUT_DIR}"
    fi
    if [ ! -d "${OUT_DIR}" ]
    then
        echo -e "${BRED}Given output is not a directory.  Exiting.${NORM}"
    else
        get_access_token
        process_input
        curl_raw "${OUT_DIR}"
    fi
}


while getopts ":-:oh" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        help)
                            display_help ;;
                        output)
                             output_function ;;
                        *)
                            opt_err ;;
                    esac ;;
                h)
                    display_help ;;
                o)
                    output_function ;;
                *)
                    opt_err ;;
        esac
done


# if no options passed, curl file into appropriate directory
if [[ $OPTIND -eq 1 ]]
then
    get_access_token
    process_input
    curl_raw "${FULL_PATH}"
fi
shift $((OPTIND-1))


# Clean up
clean-exit
