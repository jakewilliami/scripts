#! /bin/bash

# define bash directory
BASH_DIR="${HOME}/scripts/bash/"

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh

# get script dependencies
is-command-then-install nmap arp-scan "${SNIFF}" "${DHCP}"

# Help
display_help() {
    help_start 'local-net [option...]' 'The present script will ping local machines using different tools (see options).'
    help_commands '-a' '--arp' '2' 'Prints' 'a' 'rp' 'results.'
    help_commands '-g' '--geo-location' '1' 'Shows' 'g' 'eo-location' 'information based on one\x27s (public) IP address.'
    help_commands '-H' '--Hostnames' '1' '[OPTION IN DEVELOPMENT] Finds' 'H' 'ostnames' 'within the local network.'
    help_commands '-l' '--local' '2' 'Returns' 'l' 'ocal' 'IP address of present computer.'
    help_commands '-n' '--nmap' '2' 'Prints' 'n' 'map' 'results.'
    help_commands '-p' '--ping' '2' 'Prints' 'p' 'ing' '\bed results.'
    help_commands '-P' '--Public' '2' 'Returns' 'P' 'ublic' 'IP address of the present local network.'
    help_commands '-s' '--sniff' '2' '\b' 'S' 'niff' '\bs packages exchanged through the local network (with verbosity 2 out of 4).'
    help_help '2'
    clean-exit
}


ping_function() {
    TARGETNETWORK=192.168.1
    for i in $(seq 1 254); do
        (ping -c 1 $TARGETNETWORK.$i | grep "bytes from" &) #& at end makes it run parallel
    done
    sleep 1
}


arp_function() {
    sudo arp-scan -l   
}


nmap_function() {
#    IP=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'`
    IP=$(curl ipinfo.io/ip)
    SUBNET=$(echo `ifconfig  | grep 'Mask:'| grep -v '127.0.0.1' | cut -d: -f4 | awk '{print $1}' | grep -o 255 | wc -l`*8 | bc)
    #fping -a -g $IP/$SUBNET
    nmap -sP $IP/$SUBNET
}


sniff_function() {
    if [[ $(hostname) == 'jake-imac2008' ]]
    then
        WIRELESS_DEVICE='ens5'
    elif [[ $(hostname) == 'jake-macbook2007' ]]
    then
        WIRELESS_DEVICE='eth0'
    elif [[ $(hostname) == 'jake-mbp2017' ]]
    then
        WIRELESS_DEVICE='en0'
    fi
    sudo sniffglue -vv $WIRELESS_DEVICE
}


dhcp_function() {
    sudo dhcpdump -i en0 | grep -B2 'Host name'
}


local_ip() {
    WIRELES_DEVICE="echo en0"
    ipconfig getifaddr $(eval "${WIRELES_DEVICE}")
}


public_ip() {
    curl ipinfo.io/ip
}


ip_specs() {
    output_type="${1}"  # Can interpret json, xml, and csv
    curl -s "https://freegeoip.app/${output_type}/${2}" | jq .
}


geo_ip_public() {
    myip=$(curl -s ipinfo.io/ip | sed 's/[a-zA-Z<>/ :]//g')  # Get ip address
    ip_specs "json" "${myip}"
}


# Options
while getopts ":-:anphlHPsg" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        arp)
                            arp_function
                            clean-exit ;;
                        nmap)
                            nmap_function
                            clean-exit ;;
                        ping)
                            ping_function
                            clean-exit ;;
                        sniff)
                            sniff_function
                            clean-exit ;;
                        Hostnames)
                            dhcp_function
                            clean-exit ;;
                        local)
                            local_ip
                            clean-exit ;;
                        Public)
                            public_ip
                            clean-exit ;;
                        geo-location)
                            geo_ip_public
                            clean-exit ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                a)
                    arp_function 
                    clean-exit ;;
                n)
                    nmap_function
                    clean-exit ;;
                p)
                    ping_function
                    clean-exit ;;
                s)
                    sniff_function
                    clean-exit ;;
                H)
                    dhcp_function
                    clean-exit ;;
                l)
                    local_ip
                    clean-exit ;;
                P)
                    public_ip
                    clean-exit ;;
                g)
                    geo_ip_public
                    clean-exit ;;
                h)
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


# If no options
[[ -z $1 ]] && echo -e "${BYELLOW}Please specify an option.  Use option -h for help.${NORM}"


# Clean up
clean-exit