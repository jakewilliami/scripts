#! /bin/bash

# define bash directory
BASH_DIR="${HOME}/scripts/bash/"

# Immediately exits script if nothing is passed to it
if [[ -z "${@}" ]]
then
    HELP="\033[1;33m You must have at least one argument.  Use -h for help. \033[0;38m"
    echo -e "${HELP}"
    exit $?
fi

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh

# get dependencies regardless of kernel and os
is-library-then-install "${COREUTILS}" "${PDFGREP}"

#display help
display_help() {
    help_start 'cd /dir/to/search/ && pdfsearch [option... | "search term(s)"]' 'The present script will search PDFs in current directory and subdirectories for a search term, print the pdfs for which said term is found, and then print how many pdfs the search term was found in.  There is no current counter to tell how many times the search term was found.'
    help_help '2'
    clean-exit
}


while getopts ":-:h" OPTION; do
    case $OPTION in
        -)
            case $OPTARG in
                help)
                    display_help ;;
                *)
                    opt_err ;;
            esac ;;
        h)
            display_help ;; 
        *)
          opt_err ;;  
    esac
done

#start=$(python3 -c 'import time; print(time.time())')
if [[ $KERNEL == "Darwin" ]]
then
    start=`gdate +%s.%N` || clean-exit
elif [[ $KERNEL == "Linux" ]]
then
    start=`date +%s.%N` || clean-exit
fi

#begin search
pdf_search=$(pdfgrep -ril $1 | tee /tmp/pdfsearch) || clean-exit

echo -e "\033[1;38m${pdf_search}\033[0;38m"

#end of search

#calculates runtime (because *nix on os x is bad and doesn't support %N)
#end=$(python3 -c 'import time; print(time.time())')
if [[ $KERNEL == "Darwin" ]]
then
    end=`gdate +%s.%N` || clean-exit
elif [[ $KERNEL == "Linux" ]]
then
    end=`date +%s.%N` || clean-exit
fi

runtime=$(echo "$end - $start" | bc )
pdf_count=$(wc -l /tmp/pdfsearch)

echo -e "\033[1;33m$runtime seconds\033[0;38m"

echo -e "\033[1;38;5;2mThe word \"$1\" was found in"${pdf_count}" PDFs\033[0;38m"


#Other means of calculating runtime:

#python3 -c 'import time; print("%s seconds" % round(time.time()/10000000000, 2))'
#ruby -e 'puts Time.now.to_f/10000000000'#Output in seconds
#php -r 'echo microtime(TRUE)/10000000000;' 
#| perl -MTime::Piece -pe 's/(\d{13})/Time::Piece->localtime($1 \/1000)->strftime("%Y-%m-%d %a")/e'


clean-exit
