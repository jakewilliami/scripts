#! /bin/bash

#IMPORTANT NOTE:
#There exists an alias in ~/.bashrc that looks like
#alias mytex="source mytex"

DIR="${HOME}/tex-macros"
BASH_DIR="${HOME}/scripts/bash"

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh

# get script dependencies
[[ $KERNEL == "Darwin" ]] && \
    is-library-then-install "${PYTHON3}"
[[ $KERNEL == "Linux" ]] && \
    is-library-then-install "${PYTHON3}" "${PIP3}"

# Help
display_help() {
    help_start 'mytex [option...]' 'The present script will take you to the my-tex directory (for my LaTeX macros) and by default list its content.'
    help_commands '-l' '--listless' '1' 'Supresses' 'l' 'isting' 'directory contents.'
    help_help '2'
    clean-return
}


issues() {
    cd "${BASH_DIR}/.." || clean-return
    if [[ -z "${@}" ]]
    then
        ghi list -N "${@}"
    else
        ghi list -N "${@}"
    fi
    clean-return
}


opt_l() {
    cd "${DIR}"
    clean-return
}


### Sourcing the script will make getopts to re-execute in the same shell many times.  It starts to misbehave the second time, because getopts remembers where it left off the first time. Resetting variable OPTIND to 1 will force it to rescan arguments.
OPTIND=1
while getopts ":-:ilh" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        issues)
                            issues "${@:2}" ;;
                        listless)
                            opt_l ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                i)
                    issues "${@:2}" ;;
                l)
                    opt_l ;;
                h)  
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


# List
if [[ -z $1 ]]
then
    cd "${DIR}" || clean-return
    python3 "${BASH_DIR}/../python/ls.py" "${DIR}"
fi


# Clean up
clean-return
