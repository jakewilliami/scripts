#! /bin/bash

DIR="${HOME}/tex-macros"
BASH_DIR="${HOME}/scripts/bash"

if [[ $(hostname) == "jake-mbp2017.local" ]] && [[ $(whoami) == "jakeireland" ]]
then
    # Colours
    source ${BASH_DIR}/colours/json-colour-parser.sh
else
    # Ensure jq is installed
    source ${BASH_DIR}/dependencies/jq-dep.sh && \
    source ${BASH_DIR}/colours/json-colour-parser.sh
fi

if [[ $(hostname) == "jake-mbp2017.local" ]] && [[ $(whoami) == "jakeireland" ]]
then
    :
else
    # Brew Install function
    source ${BASH_DIR}/dependencies/brew-install-dep.sh
    # Satisfy Dependencies
    brew_install "${SATISFYING_DEPS}" python3 && \
    echo -e "${DEPS_SATISFIED}"
fi

# Help
display_help() {
    echo -e "${BWHITE}Usage: scripts [option...]${NORM}"
    echo
    echo -e "${ITWHITE}The present script will take you to the my-tex directory (for my LaTeX macros) and by default list its content.${NORM}"
    echo
    echo -e "${BBLUE}\t -l | --listless \t${BYELLOW}Supresses ${ULINE}${BBLUE}l${BYELLOW}isting${NORM}${BYELLOW} directory content${NORM}"
    echo -e "${BBLUE}\t -i | --issues\t\t${BYELLOW}Prints ${ULINE}${BBLUE}i${BYELLOW}ssues${NORM}${BYELLOW} currently open.${BNORM}"
    echo -e "${BBLUE}\t -h | --help \t\t${BYELLOW}Shows ${ULINE}${BBLUE}h${BYELLOW}elp${NORM} ${BYELLOW}(present output).${NORM}"
    clean-return
}


issues() {
    cd "${BASH_DIR}/.." || clean-return
    if [[ -z "${@}" ]]
    then
        ghi list -N "${@}"
    else
        ghi list -N "${@}"
    fi
    clean-return
}


opt_err() {
    HELP="${BYELLOW}Invalid option.  Use option -h for help.${NORM}"
    echo -e "${HELP}"
	clean-return
}


opt_l() {
    cd "${DIR}"
    clean-return
}


### Sourcing the script will make getopts to re-execute in the same shell many times.  It starts to misbehave the second time, because getopts remembers where it left off the first time. Resetting variable OPTIND to 1 will force it to rescan arguments.
OPTIND=1
while getopts ":-:ilh" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        issues)
                            issues "${@:2}" ;;
                        listless)
                            opt_l ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                i)
                    issues "${@:2}" ;;
                l)
                    opt_l ;;
                h)  
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


# List
if [[ -z $1 ]]
then
    cd "${DIR}" || clean-return
    python3 "${BASH_DIR}/../python/ls.py" "${DIR}"
fi


# Clean up
clean-return
