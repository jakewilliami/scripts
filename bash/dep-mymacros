#! /bin/bash

GIT_LOCATION="${HOME}/Documents/my_macros/"
LOCAL_DIR="${GIT_LOCATION}../../.config/texstudio/templates/user/"
GIT_DIR="${GIT_LOCATION}tea_templates/"
BASH_DIR="${HOME}/bin/scripts/bash/"


#Clean up
clean-exit() {
    [[ -f ${BASH_DIR}/textcolours.txt ]] && \
    rm ${HOME}/bin/scripts/bash/textcolours.txt
    exit $?
}


# Colours
jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${BASH_DIR}/textcolours.json | sed -e 's/=\([^" >][^ >]*\)/="\1"/g' >> ${BASH_DIR}/textcolours.txt && source ${BASH_DIR}/textcolours.txt


display_help() {
    echo -e "${BWHITE}Usage: mymacros [option...]${BWHITE}"
    echo
    echo -e "${ITWHITE}The present script will cd the user to the local git repository called \"mymacros\" (located at \`~/Documents/my_macros\`).  It will also ensure that the templates in said repository are up to date with local templates which are connected to TeXStudio (found in \`~/.config/texstudio/templates/user\`)${NORM}"
    echo
    echo -e "${BBLUE}\t -h | --help \t${BYELLOW}Shows ${ULINE}${BBLUE}h${BYELLOW}elp${NORM}${BYELLOW} (present output).${NORM}"
    clean-exit
}


opt_err() { #Invalid option (getopts already reported the illegal option)
    HELP="${BYELLOW}Not a valid option.  Use -h for help.${BNORM}"
    echo -e "${HELP}"
	clean-exit && clean-exit
}


while getopts ":-:h" OPTION; do
    case $OPTION in
        -)
            case $OPTARG in
                help)
                    display_help ;;
                *)
                    opt_err ;;
            esac ;;
        h)
            display_help ;;
        *)
            opt_err ;;
    esac
done


#Define local variables
REPLACING_TEX="${BYELLOW}Replacing outdated .tex file(s) in git repository.${NORM}"
COMPLETED_TEX="${BGREEN}.tex transfer complete.${NORM}"
REPLACING_JSON="${BYELLOW}Replacing outdated .json file(s) in git repository.${NORM}"
COMPLETED_JSON="${BGREEN}.json transfer complete.${NORM}"
ALL_GOOD_TEX="${BGREEN}Your git repository's templates directory's .tex files are up to date with your local templates directory.${NORM}"
ALL_GOOD_JSON="${BGREEN}Your git repository's templates directory's .json files are up to date with your local templates directory.${NORM}"


DIFFT=false
DIFFJ=false

#Begin script

cd "${GIT_LOCATION}" || clean-exit

#check tex files
for t in "${LOCAL_DIR}"/*.tex; do
   if ! cmp -s "$t" "${GIT_DIR}"/$(basename $t)
   then
        DIFFT=true
        echo -e "${REPLACING_TEX}" 
        cp -fr "$t" "${GIT_DIR}/" && echo -e ${COMPLETED_TEX}
    fi
done

[ $DIFFT = false ] && \
echo -e "${ALL_GOOD_TEX}"


for j in "${LOCAL_DIR}"/*.json; do
   if ! cmp -s "$j" "${GIT_DIR}"/$(basename $j)
   then
        DIFFJ=true
        echo -e "${REPLACING_JSON}" 
        cp -fr "$j" "${GIT_DIR}/" && echo -e ${COMPLETED_JSON}
    fi
done


[ "$DIFFJ" = "false" ] && \
echo -e "${ALL_GOOD_JSON}"


#clean up
clean-exit
