#! /bin/bash

BASH_DIR="${HOME}/scripts/bash/"

if [[ $USER = "jakeireland" ]]
then
    :
else
    # Ensure jq is installed
    source ${BASH_DIR}/dependencies/jq-dep.sh
fi

# Colours
source ${BASH_DIR}/colours/json-colour-parser.sh

if [[ $USER = "jakeireland" ]]
then
    :
else
    # Brew Install function
    source ${BASH_DIR}/dependencies/brew-install-dep.sh
    # Satisfy Dependencies
    brew_install "${SATISFYING_DEPS}" python3 && \
    echo -e "${DEPS_SATISFIED}"
fi

REPLACING1="${BYELLOW}Replacing outdated file in git repository from ~/.bashrc.${NORM}"
COMPLETED1="${BGREEN}.bashrc transfer complete.${NORM}"
REPLACING2="${BYELLOW}Replacing outdated file in git repository from ~/.bash_profile.${NORM}"
COMPLETED2="${BGREEN}.bash_profile transfer complete.${NORM}"

# Help
display_help() {
    echo -e "${BWHITE}Usage: scripts [option...]${NORM}"
    echo
    echo -e "${ITWHITE}The present script will take you to the scripts directory and by default list its content.${NORM}"
    echo
    echo -e "${BBLUE}\t -l | --listless \t${BYELLOW}Supresses ${ULINE}${BBLUE}l${BYELLOW}isting${NORM}${BYELLOW} directory content${NORM}"
    echo -e "${BBLUE}\t -i | --issues\t\t${BYELLOW}Prints ${ULINE}${BBLUE}i${BYELLOW}ssues${NORM}${BYELLOW} that are tagged with \"depricated\" and \"pdfsearch\" unless stated otherwise.${BNORM}"
    echo -e "${BBLUE}\t -h | --help \t\t${BYELLOW}Shows ${ULINE}${BBLUE}h${BYELLOW}elp${NORM} ${BYELLOW}(present output).${NORM}"
    clean-return
}


opt_err() {
    HELP="${BYELLOW}Invalid option.  Use option -h for help.${NORM}"
    echo -e "${HELP}"
	clean-return
}


issues() {
    cd "${BASH_DIR}/.." || clean-return
    if [[ -z "${@}" ]]
    then
        ghi list -N "depricated pdfsearch"
    else
        ghi list -N "${@}"
    fi
    clean-return
}


opt_l() {
    cd "${BASH_DIR}/.."
    clean-return
}


### Sourcing the script will make getopts to re-execute in the same shell many times.  It starts to misbehave the second time, because getopts remembers where it left off the first time. Resetting variable OPTIND to 1 will force it to rescan arguments.
OPTIND=1
while getopts ":-:ilh" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        issues)
                            issues "${@:1}" ;;
                        listless)
                            opt_l ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                i)
                    issues "${@:1}" ;;
                l)
                    opt_l ;;
                h)  
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


GIT_LOCATION="${HOME}/scripts/"
LOCAL_FILE1="${HOME}/.bashrc"
LOCAL_FILE2="${HOME}/.bash_profile"
if [[ -d ${GIT_LOCATION}/system/ ]]
then
    :
else
    mkdir ${HOME}/scripts/system
fi
GIT_DIR="${GIT_LOCATION}/system/"


# List
if [[ -z $1 ]]
then
    cd "${BASH_DIR}/.." || clean-return
    python3 "${BASH_DIR}/../python/ls.py" "${BASH_DIR}/.."
fi


# check if local bashrc matches git one
if cmp -s ${LOCAL_FILE1} ${GIT_DIR}/.bashrc
then
    :
else
    echo -e "${REPLACING1}" && \
    cp "${LOCAL_FILE1}" "${GIT_DIR}" && \
    echo -e "${COMPLETED1}"
fi


# check if local bash_profile matches git one
if cmp -s ${LOCAL_FILE2} ${GIT_DIR}/.bash_profile
then
    :
else
    echo -e "${REPLACING2}" && \
    cp "${LOCAL_FILE2}" "${GIT_DIR}" && \
    echo -e "${COMPLETED2}"
fi


# Clean up
clean-return
