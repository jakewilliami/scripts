#! /bin/bash

#IMPORTANT NOTE:
#There exists an alias in ~/.bashrc that looks like
#alias scripts="source scripts"

# define bash directory
BASH_DIR="${HOME}/scripts/bash/"

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh

# get script dependencies
is-command-then-install python3

#define messages
REPLACING1="${BYELLOW}Replacing outdated file in git repository from ~/.bashrc.${NORM}"
COMPLETED1="${BGREEN}.bashrc transfer complete.${NORM}"
REPLACING2="${BYELLOW}Replacing outdated file in git repository from ~/.bash_profile.${NORM}"
COMPLETED2="${BGREEN}.bash_profile transfer complete.${NORM}"

# Help
display_help() {
    help_start 'scripts [option...]' 'The present script will take you to the scripts directory and by default list its content.  See `~/scripts/python/ls.py`.'
    help_commands '-l' '--listless' '1' 'Supresses' 'l' 'isting' 'directory contents.'
    help_commands '-i' '--issues' '2' 'Prints' 'i' 'ssues' 'currently open.'
    help_help '2'
    clean-return
}


issues() {
    cd "${BASH_DIR}/.." || clean-return
    if [[ -z "${@}" ]]
    then
        ghi list -N "depricated pdfsearch"
    else
        ghi list -N "${@}"
    fi
    clean-return
}


opt_l() {
    cd "${BASH_DIR}/.."
    clean-return
}


### Sourcing the script will make getopts to re-execute in the same shell many times.  It starts to misbehave the second time, because getopts remembers where it left off the first time. Resetting variable OPTIND to 1 will force it to rescan arguments.
OPTIND=1
while getopts ":-:ilh" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        issues)
                            issues "${@:2}" ;;
                        listless)
                            opt_l ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                i)
                    issues "${@:2}" ;;
                l)
                    opt_l ;;
                h)  
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


GIT_LOCATION="${HOME}/scripts/"
LOCAL_FILE1="${HOME}/.bashrc"
LOCAL_FILE2="${HOME}/.bash_profile"


# List
if [[ -z $1 ]]
then
    cd "${BASH_DIR}/.." || clean-return
    python3 "${BASH_DIR}/../python/ls.py" "${BASH_DIR}/.."
fi


# make sure bash system info is up to date if i'm me
if [[ $(hostname) == 'jake-mbp2017.local' ]] && [[ $(whoami) == 'jakeireland' ]]
then
    # make system dir if it doesn't exist
    if [[ ! -d ${GIT_LOCATION}/system/ ]]
    then
        mkdir ${HOME}/scripts/system
    fi
    GIT_DIR="${GIT_LOCATION}/system/"
    # check if local bashrc matches git one
    if ! cmp -s ${LOCAL_FILE1} ${GIT_DIR}/.bashrc
    then
        echo -e "${REPLACING1}" && \
        cp "${LOCAL_FILE1}" "${GIT_DIR}" && \
        echo -e "${COMPLETED1}"
    fi
    # check if local bash_profile matches git one
    if ! cmp -s ${LOCAL_FILE2} ${GIT_DIR}/.bash_profile
    then
        echo -e "${REPLACING2}" && \
        cp "${LOCAL_FILE2}" "${GIT_DIR}" && \
        echo -e "${COMPLETED2}"
    fi
fi


# Clean up
clean-return
