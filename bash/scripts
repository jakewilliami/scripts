#! /bin/bash

DIR="${HOME}/bin/scripts/"
BASH_DIR="${DIR}/bash/"


#Clean up
clean-exit() {
    [[ -f ${BASH_DIR}/textcolours.txt ]] && \
    rm ${BASH_DIR}/textcolours.txt
    exit $?
}


# Colours
jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${BASH_DIR}/textcolours.json | sed -e 's/=\([^" >][^ >]*\)/="\1"/g' >> ${BASH_DIR}/textcolours.txt && source ${BASH_DIR}/textcolours.txt


REPLACING1="${BYELLOW}Replacing outdated file in git repository from ~/.bashrc.${NORM}"
COMPLETED1="${BGREEN}.bashrc transfer complete.${NORM}"
REPLACING2="${BYELLOW}Replacing outdated file in git repository from ~/.bash_profile.${NORM}"
COMPLETED2="${BGREEN}.bash_profile transfer complete.${NORM}"


# Help
display_help() {
    echo -e "${BWHITE}Usage: scripts [option...]${NORM}"
    echo
    echo -e "${ITWHITE}The present script will take you to the scripts directory and by default list its content.${NORM}"
    echo
    echo -e "${BBLUE}\t -l | --listless \t${BYELLOW}Supresses ${ULINE}${BBLUE}l${BYELLOW}isting${NORM}${BYELLOW} directory content${NORM}"
    echo -e "${BBLUE}\t -h | --help \t\t${BYELLOW}Shows ${ULINE}${BBLUE}h${BYELLOW}elp${NORM} ${BYELLOW}(present output).${NORM}"
    clean-exit
}


opt_err() {
    HELP="${BYELLOW}Invalid option.  Use option -h for help.${NORM}"
    echo -e "${HELP}"
	clean-exit
}


opt_l() {
    cd "${DIR}" || clean-exit
}


while getopts ":-:lh" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        listless)
                            opt_l ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                l)
                    opt_l ;;
                h)  
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


GIT_LOCATION="${HOME}/bin/scripts/"
LOCAL_FILE1="${HOME}/.bashrc"
LOCAL_FILE2="${HOME}/.bash_profile"
GIT_DIR="${GIT_LOCATION}/system/"


# List
if [[ -z $1 ]]
then
    cd "${DIR}" || clean-exit
    python3 "${DIR}"python/ls.py "${DIR}"
fi


# check if local bashrc matches git one
if cmp -s ${LOCAL_FILE1} ${GIT_DIR}/.bashrc
then
    :
else
    echo -e "${REPLACING1}" && \
    cp "${LOCAL_FILE1}" "${GIT_DIR}" && \
    echo -e "${COMPLETED1}"
fi


# check if local bash_profile matches git one
if cmp -s ${LOCAL_FILE2} ${GIT_DIR}/.bash_profile
then
    :
else
    echo -e "${REPLACING2}" && \
    cp "${LOCAL_FILE2}" "${GIT_DIR}" && \
    echo -e "${COMPLETED2}"
fi


# Clean up
clean-exit
