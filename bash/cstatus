#! /bin/bash

# define bash directory
BASH_DIR="${HOME}/scripts/bash/"

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh

# get script dependencies
is-command-then-install "${NETSTAT}"
[[ $OS == "macos" ]] && is-command-then-install "${RUBY_PACKAGE}" "${RUBY_VERSION}" "${RUBY_BUILD}"
[[ $OS == "macos" ]] && gem_install iStats
[[ $OS == "arch" ]] && is-command-then-install "${HWINFO}"
[[ $OS == "debian" ]] && is-command-then-install "${NETSTAT_ALT}"
[[ $(uname -s) == "Linux" ]] && is-command-then-install "${INXI}" "${PYDF}" "${POWERSTAT}" "${DSTAT}"
[[ $(uname -s) == "Linux" ]] && is-library-then-install "${LMSENSORS}" "${SYSSTAT}"

# Help
display_help() {
    help_start 'cstatus [option...]' 'The present script will tell the user computer status/information given an option.'
    help_commands '-a' '--arch' '3' 'Prints the' 'a' 'rchitecture' 'on which the present computer runs.'
    help_commands '-d' '--devices' '3' 'Prints the current network' 'd' 'evices' '\b.'
    help_commands '-D' '--extended-devices' '1' 'Prints an overview of the current computer\x27s network' 'D' 'evices (extended)' '\b.'
    help_commands '-l' '--live-overview' '1' 'Gives a' 'l' 'ive overview' 'of current processes.'
    help_commands '-n' '--network' '3' 'Prints' 'n' 'etwork' 'byte-transfer information.'
    help_commands '-N' '--network-alt' '2' 'Prints' 'n' 'etwork' 'byte-transfer information using alternative tools to the `-n` option.'
    help_commands '-p' '--power' '3' 'Prints' 'p' 'ower' 'supply information.'
    help_commands '-P' '--PID' '3' 'Lists' 'P' 'ID' '\bs and associated information.'
    help_commands '-o' '--overview' '2' 'Prints a device' 'o' 'verview' 'of network interfaces, cpu information, and disk space.'
    help_commands '-R' '--RAM' '3' 'Prints amount of' 'R' 'AM' 'in use in the present computer.'
    help_commands '-s' '--cpu-stats' '2' 'Prints CPU' 's' 'tatistic' 'information.'
    help_commands '-S' '--Space' '3' 'Prints total' 'S' 'pace' 'left on currently available drives'
    help_commands '-u' '--cpu-util' '2' 'Prints total' 'u' 'tilisation' 'of the CPU as a percentage.'
    help_commands '-U' '--cpu-util-extended' '1' 'Prints' 'u' 'tilisation' 'of the CPU with extended information.'
    help_help '3'
    clean-exit
}


space() {
    if [[ $OS == "macos" ]]
    then
        df -mh
    elif [[ $OS == "arch" ]]
    then
        pydf
    fi
}


cpu_utilisation() {
    ps -A -o %cpu | \
    awk '{s+=$1} END {print s "%"}'  # Adds up all processes using cpu
    if [[ $(uname -s) == "Linux" ]]
    then
        mpstat -u -o JSON | jq
    fi
}


cpu_utilisation_extended() {
    if [[ $(uname -s) == "Linux" ]]
    then
        iostat -cdhx -o JSON | jq
    else
        echo -e "${BYELLOW}This option is not currently supported for macOS or Debian.${NORM}"
    fi
}


cpu_statistics() {
    if [[ $OS == "macos" ]]
    then
        istats
    elif [[ $(uname -s) == "Linux" ]]
    then
        sudo sensors-detect
    fi
}


extended_devices() {
    if [[ $OS == "macos" ]]
    then
        echo -e "${BYELLOW}This option is not currently supported for macOS.${NORM}"
    elif [[ $OS == "arch" ]]
    then
        hwinfo --short
    fi
}


network_devices_extended() {
    if [[ $OS == "arch" ]]
    then
        hwinfo --short
    else
        echo -e "${BYELLOW}This option is not currently supported for macOS or Debian.${NORM}"
    fi
}


ram_used() {
    if [[ $(uname -s) == "Linux" ]]
    then
        free -mh
    elif [[ $OS == "macos" ]]
    then
        echo -e "${BYELLOW}This option is not currently supported for macOS.${NORM}"
    fi
}


network_devices() {
    if [[ $(uname -s) == "Darwin" ]]
    then
        ifconfig
    elif [[ $(uname -s) == "Linux" ]]
    then
        ip address show
    fi
}

overview() {
    if [[ $OS == "macos" ]]
    then
        echo -e "${BYELLOW}This option is not currently supported for macOS.${NORM}"
    elif [[ $(uname -s) == "Linux" ]]
    then
        if command -v inxi > /dev/null 2>&1 #use lshw because inxi has to be installed from the AUR
        then
            inxi -Fx
        else
            sudo lshw -short
        fi
    fi
}


network_stats() {
    if [[ $OS == "debian" || $OS == "macos" ]]
    then
        ifstat
    else
        vnstat --live
    fi
}



network_stats_alt() {
    if [[ $OS == "debian" ]]
    then
        sudo tcpstat
    else
        echo -e "${BYELLOW}This option is not currently supported for macOS or Arch.${NORM}"
    fi
}



power() {
    if [[ $OS == "debian" ]]
    then
        powerstat -Hz
    elif [[ $OS == "arch" ]]
    then
        upower --dump 
        upower --monitor-detail
    elif [[ $OS == "macos" ]]
    then
        echo -e "${BYELLOW}This option is not currently supported for macOS.${NORM}"
    fi
}


pid_stat() {
    if [[ $OS == "macos" ]]
    then
        ps aux
    elif [[ $(uname -s) == "Linux" ]]
    then
        pidstat
    fi
}


live_overview() {
    if [[ $(uname -s) == "Linux" ]]
    then
        dstat
    elif [[ $OS == "macos" ]]
    then
        top -o cpu
    fi
}


bits() {
    echo -e "${BGREEN}This computer is running on a $(getconf LONG_BIT)-bit architecture.${NORM}"
}


while getopts ":-:auhsSdDRonNpUlP" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        cpu-util-extended)
                            cpu_utilisation_extended ;;
                        pid)
                            pid_stat ;;
                        live-overview)
                            live_overview ;;
                        network)
                            network_stats ;;
                        network-alt)
                            network_stats_alt ;;
                        overview)
                            overview ;;
                        RAM)
                            ram_used ;;
                        extended-devices)
                            network_devices_extended ;;
                        devices)
                            network_devices ;;
                        Space)
                            space ;;
                        cpu-util)
                            cpu_utilisation ;;
                        cpu-stats)
                            cpu_statistics ;;
                        arch)
                            bits ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                U)
                    cpu_utilisation_extended ;;
                P)
                    pid_stat ;;
                l)
                    live_overview ;;
                n)
                    network_stats ;;
                N)
                    network_stats_alt ;;
                p)
                    power ;;
                o)
                    overview ;;
                R)
                    ram_used ;;
                D)
                    network_devices_extended ;;
                d)
                    network_devices ;;
                S)
                    space ;;
                u)
                    cpu_utilisation ;;
                s)
                    cpu_statistics ;;
                a)
                    bits ;;
                h)  
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


if [[ -z $1 ]]
then
    opt_err_none
fi


# Clean up
clean-exit
