#! /bin/bash


# Check to see if homebrew is installed
if ! which -s brew
then
    echo -e "\u001b[1;33mInstalling dependencies...\u001b[0;38m" && \
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" && \
    echo -e "\u001b[1;38;5;2mHomebrew installed successfully\u001b[0;38m"
fi


# Ensure jq is installed
if ! brew ls --versions jq > /dev/null
then
    echo -e "\001b[1;38mInstalling \`jq\`...\u001b[0;38m" && \
    brew install jq && \
    echo -e "\u001b[1;38;5;2m\`jq\` installed successfully\u001b[0;38m"
fi


BASH_DIR="${HOME}/bin/scripts/bash/"


# Clean up
clean-exit() {
    [[ -f ${BASH_DIR}/textcolours.txt ]] && \
    rm ${HOME}/bin/scripts/bash/textcolours.txt
    exit $?
}


# Colours
jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${BASH_DIR}/textcolours.json | sed -e 's/=\([^" >][^ >]*\)/="\1"/g' >> ${BASH_DIR}/textcolours.txt && source ${BASH_DIR}/textcolours.txt


# Brew Install function
brew_install() {
    BREWINSTALL=false
    for i in ${@:2};
    do
        if ! brew ls --versions $i > /dev/null
        then
            BREWINSTALL=true
            echo ${1}
            brew install $i
        fi
    done
    if [ "${BREWINSTALL}" = true ]
    then
        return 0
    else
        return 1
    fi
}


# Satisfy Dependencies
brew_install "${BWHITE}Satisfying dependencies...${NORM}" ghi && \
echo -e "${BGREEN}Dependencies satisfied.${NORM}"


# Help
display_help() { #Displays help
    echo -e "${BWHITE}Usage: add-issue [option...] [issue message] [label 1] ... [label n]${NORM}"
    echo
    echo -e "${ITWHITE}The present script will create an issue and label/tag it with already-created labels.${NORM}"
    echo
    echo -e "${BBLUE}\t -t | --make-tag \t${BYELLOW}Creates new ${ULINE}${BBLUE}t${BYELLOW}ags${NORM}${BYELLOW}/labels.${BNORM}"
    echo -e "${BBLUE}\t -h | --help \t\t${BYELLOW}Shows ${ULINE}${BBLUE}h${BYELLOW}elp${NORM}${BYELLOW} (present output).${BNORM}"  # fold -w10
    clean-exit
}


opt_err() { #Invalid option (getopts already reported the illegal option)
    HELP="${BYELLOW}Not a valid option.  Use -h for help.${BNORM}"
    echo -e "${HELP}"
	clean-exit
}


opt_err_none() { #Invalid option (getopts already reported the illegal option)
    HELP="${BYELLOW}You must have at least two arguments (message and tag(s)).  Use -h for help.${BNORM}"
    echo -e "${HELP}"
	clean-exit
}


add_issue() {
    REPO_NAME=$(basename `git rev-parse --show-toplevel`)
    GITHUB_USER_NAME=$(git config --list | grep -E "^github.user" | sed 's|github.user=||g')
    NUM_REGEX="[0-9]{1,4}"
    # Get issues | get top issue and header | Remove header
    ghi open -m "${1}" && \
    MOST_RECENT_ISSUE=$(ghi list | grep -A1 "# ${GITHUB_USER_NAME}/${REPO_NAME}" | grep -v "# ${GITHUB_USER_NAME}/${REPO_NAME}" | grep -Eo "${NUM_REGEX}") && \
    ghi label $MOST_RECENT_ISSUE -a "${@:2}"  # First ag = message; second arg onwards = issue labels
}


make_tag() {
    ghi label "${@}"
}


# Options
while getopts ":-:th" OPTION
do
        case $OPTION in
                -)  #Long options for bash (without GNU)
                    case $OPTARG in
                        make-tag)  
                            make_tag ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                t)
                    make_tag ;;
                h)  
                    display_help ;;
                *)  
                    opt_err ;;
        esac
done


#if no arguments
[[ -z $1 ]] && opt_err_none && clean-exit


#if no options were passed                   
if [ $OPTIND -eq 1 ]
then 
    add_issue "${1}" "${@:2}"
    clean-exit
fi


# Clean up
clean-exit