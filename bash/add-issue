#! /bin/bash

# define bash directory
BASH_DIR="${HOME}/scripts/bash/"

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh

# get script dependencies
is-command-then-install $GHI

# Help
display_help() { #Displays help
    help_start 'add-issue [option...] [issue message] [label 1] ... [label n]' 'The present script will create an issue and label/tag it with already-created labels.'
    help_commands '-t' '--make-tag' '1' 'Creates new' 't' 'ags' '/labels.'
    help_help '2'
    clean-exit
}


add_issue() {
    REPO_NAME=$(basename `git rev-parse --show-toplevel`)
    GITHUB_USER_NAME=$(git config --list | grep -E "^github.user" | sed 's|github.user=||g')
    NUM_REGEX="[0-9]{1,4}"
    # Get issues | get top issue and header | Remove header
    ghi open -m "${1}" && \
    MOST_RECENT_ISSUE=$(ghi list | grep -A1 "# ${GITHUB_USER_NAME}/${REPO_NAME}" | grep -v "# ${GITHUB_USER_NAME}/${REPO_NAME}" | grep -Eo "${NUM_REGEX}") && \
    ghi label $MOST_RECENT_ISSUE -a "${@:2}"  # First ag = message; second arg onwards = issue labels
}


make_tag() {
    ghi label "${@}"
}


# Options
while getopts ":-:th" OPTION
do
        case $OPTION in
                -)  #Long options for bash (without GNU)
                    case $OPTARG in
                        make-tag)  
                            make_tag ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                t)
                    make_tag ;;
                h)  
                    display_help ;;
                *)  
                    opt_err ;;
        esac
done


#if no arguments
[[ -z $1 ]] && opt_err_none && clean-exit


#if no options were passed   
if [ $OPTIND -eq 1 ]
then 
    add_issue "${1}" "${@:2}"
    clean-exit
fi


# Clean up
clean-exit
