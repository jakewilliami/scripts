#! /bin/bash

trap "exit" INT

# define bash directory
BASH_DIR="$(realpath $(dirname $0))"
SCRIPTS_DIR="$(realpath $(dirname ${BASH_DIR}))"
PERL_VERSION_PATH="$($(which perl) --version | head -n 2 | tail -n 1 | awk -F'[v).]' '{print $4 "." $5 "." $6}')"
PATH_VERSION_BREW="$(/usr/local/bin/perl --version | head -n 2 | tail -n 1 | awk -F'[v).]' '{print $4 "." $5 "." $6}')"
PERL_VERSION_CURL="$(curl -s https://www.perl.org/ | awk -F'<span class="version-highlight">|</span>' '{printf "%s",$2}')"
PERL_VERSION_CURRENT=${PERL_VERSION_CURL%%<*}

# Immediately exits script if nothing is passed to it
if [[ -z "${@}" ]]
then
    HELP="\033[1;33m You must have at least one argument.  Use -h for help. \033[0;38m"
    echo -e "${HELP}"
    exit $?
fi

# ensure there is a place to write temporary files to
if [[ ! -d "${SCRIPTS_DIR}"/perl/temp.d/ ]]
then
    mkdir "${SCRIPTS_DIR}"/perl/temp.d/
fi

# source required scripts
source "${BASH_DIR}"/dependencies/source-dependencies.sh

# get dependencies regardless of kernel and os
is-command-then-install "${PERL_PACKAGE}"
is-library-then-install "${SED_PACKAGE}"

# Help
display_help() { #Displays help
    help_start 'applications [option...]' 'The present script will create system information in \`~/scripts/perl\` regarding applications and use them to find the applications which are not managed by the Mac App Store or Homebrew.'
    help_commands '-a' '--list-applications' '1' 'Lists' 'a' 'pplications' 'that are not from the app store or made by Apple.'
    help_commands '-b' '--list-brew' '2' 'Lists' 'b' 'rew' 'casks.'
    help_commands '-c' '--compile' '3' '\b' 'c' 'ompiles' 'data from applications and saves as text in \`~/scripts/perl\`.'
    help_commands '-C' '--Compare' '3' '\b' 'C' 'ompares' 'application lists from brew and system; outputs applications found on system not installed by brew.'
    help_commands '-n' '--no-interaction' '1' 'Does the same as --Compare but with ' 'n' 'o [user] interaction' '(takes parameter that is an output file)'
    help_help '3'
    clean-exit
}

notify_user() {
    echo -e "${BBLUE}===>${NORM}\t${BWHITE}${1}${NORM}"
}

# Compile .txt files for casks, applications, and process system_profiler -xml
perl_compile() {
    if [ "${PERL_VERSION_PATH}" == "${PERL_VERSION_BREW}" ]
    then
        perl -X ${SCRIPTS_DIR}/perl/applications.pl > /dev/null 2>&1 || \
            echo -e "${BYELLOW}Please run \`for i in XML::LibXML File::HomeDir; do cpan install \"\${i}\"; done\` to install the required Perl modules.${NORM}"
    else
        if [ -z "$(brew list | grep -E '^perl$')" ]
        then
            echo -e "${BYELLOW}The current version of Perl available is version ${PERL_VERSION_CURRENT}.  You are currently running version ${PERL_VERSION_PATH}.  The version required to run this script is 5.30.\nPlease run \`brew install perl\` and check that \`which perl\` is located at /usr/local/bin/perl.  Once that is done (and you ensure that \`/usr/local/bin/perl --version\` is correct), please run this script again.${NORM}"
            # echo -e "If you have trouble getting the perl executable downloaded via Homebrew to be the one used by your path, run \`\\\\curl -L https://install.perlbrew.pl | bash\` to download \`perlbrew\` (and ensure that \`~/perl5/perlbrew/bin/\` is in your path), and then run \`perlbrew switch perl-${PATH_VERSION_BREW}\`${BNORM}"
        else
            if [ -e /usr/local/bin/perl ]
            then
                /usr/local/bin/perl -X ${SCRIPTS_DIR}/perl/applications.pl > /dev/null 2>&1 || \
                    echo -e "${BYELLOW}Please run \`for i in XML::LibXML File::HomeDir Text::Fuzzy::PP; do /usr/local/bin/cpan install \"\${i}\"; done\` to install the required Perl modules.${NORM}"
            else
                echo -e "${BWHITE}The Perl version that is currently on your path is version ${PERL_VERSION_PATH}.  This should be the same as your Homebrew version, ${PERL_VERSION_BREW}.  If I'm quite honest, I don't understand how we got here.  I mean logically.  Your Perl version on your path is not the same as that from Homebrew, whatever that may be; ${ITWHITE}AND${NORM}${BWHITE} your have Perl installed via Homebrew; ${ITWHITE}AND${NORM}${BWHITE} the default path for Perl (if installed via Homebre) is not what it should be (i.e., it is not in /usr/local/bin/).  What on earth have you done to your system?${NORM}"
            fi
        fi
    fi
    
}

list_applications() {
    notify_user 'Compiling Homebrew and system lists of applications.'
    
    perl_compile
    
    cat ${SCRIPTS_DIR}/perl/temp.d/dataApps.txt | cut -f1 -d":" | sed 's/[0-9]*$//' | sed 's/-$//' | awk '{$1=$1;print}' | sort | uniq
}

list_casks() {
    notify_user 'Compiling Homebrew and system lists of applications.'
    
    perl_compile
    
    cat ${SCRIPTS_DIR}/perl/temp.d/casks.txt | awk '{ gsub ("-", " ", $0); print}'
}

compare_lists() {
    notify_user 'Compiling Homebrew and system lists of applications.'
    
    perl_compile
    
    notify_user 'Editing lists for fuzzy matching.'
    
    # create applications list from raw
    awk -F':' '
        {
            gsub(/[^[:alnum:]]+/, "", $1)
        }
        {
            print tolower($1)
        }
        ' ${SCRIPTS_DIR}/perl/temp.d/dataApps.txt | sort | uniq > /tmp/dataApps.txt
        
    # create cask list from raw
    awk '
        {
            gsub(/[^[:alnum:]]+/, "")
        }
        {
            print tolower($0)
        }
        ' ${SCRIPTS_DIR}/perl/temp.d/casks.txt > /tmp/casks.txt
    
    # edit cask list
    notify_user 'Editing lists for manual override.'
    
    gsed -i 's/^zoomus$/zoom/g' /tmp/casks.txt
    gsed -i 's/^iterm[[:digit:]]*$/iterm/g' /tmp/casks.txt
    gsed -i 's/^julia[[:digit:]]*$/julia/g' /tmp/dataApps.txt
    gsed -i 's/^tigervncviewer[[:digit:]]*$/tigervncviewer/g' /tmp/dataApps.txt
    gsed -i 's/^feedthebeast$/ftbapp/g' /tmp/casks.txt
    gsed -i 's/^gimp[[:digit:]]*$/gimp/g' /tmp/dataApps.txt
    gsed -i 's/^adobedigitaleditions[[:digit:]]*$/adobedigitaleditions/g' /tmp/dataApps.txt
    gsed -i 's/^alfred[[:digit:]]*$/alfred/g' /tmp/dataApps.txt
    gsed -i 's/^dockerquickstartterminal$/dockertoolbox/g' /tmp/dataApps.txt
    
    # compare lists
    # grep -iv -Fvxf /tmp/casks.txt /tmp/dataApps.txt
    # comm -12
    notify_user 'Comparing lists.'
    
    awk '
        BEGIN {
            FS=""
               }                        # preserve whitespace
        (NR==FNR) {
            ll1[FNR]=$0; nl1=FNR
                   }                    # file1, index by lineno
        (NR!=FNR) {
            ss2[$0]++
                  }                     # file2, index by string
        END {
            for (ll=1; ll<=nl1; ll++) if (!(ll1[ll] in ss2)) print ll1[ll]
        }
        ' /tmp/dataApps.txt /tmp/casks.txt | column
}


no_interaction() {
    
    perl_compile
    
    # create applications list from raw
    awk -F':' '
        {
            gsub(/[^[:alnum:]]+/, "", $1)
        }
        {
            print tolower($1)
        }
        ' ${SCRIPTS_DIR}/perl/temp.d/dataApps.txt | sort | uniq > /tmp/dataApps.txt
        
    # create cask list from raw
    awk '
        {
            gsub(/[^[:alnum:]]+/, "")
        }
        {
            print tolower($0)
        }
        ' ${SCRIPTS_DIR}/perl/temp.d/casks.txt > /tmp/casks.txt
    
    # edit cask list
    gsed -i 's/^zoomus$/zoom/g' /tmp/casks.txt
    gsed -i 's/^iterm[[:digit:]]*$/iterm/g' /tmp/casks.txt
    gsed -i 's/^julia[[:digit:]]*$/julia/g' /tmp/dataApps.txt
    gsed -i 's/^tigervncviewer[[:digit:]]*$/tigervncviewer/g' /tmp/dataApps.txt
    gsed -i 's/^feedthebeast$/ftbapp/g' /tmp/casks.txt
    gsed -i 's/^gimp[[:digit:]]*$/gimp/g' /tmp/dataApps.txt
    gsed -i 's/^adobedigitaleditions[[:digit:]]*$/adobedigitaleditions/g' /tmp/dataApps.txt
    gsed -i 's/^alfred[[:digit:]]*$/alfred/g' /tmp/dataApps.txt
    gsed -i 's/^dockerquickstartterminal$/dockertoolbox/g' /tmp/dataApps.txt
    
    # compare lists
    # grep -iv -Fvxf /tmp/casks.txt /tmp/dataApps.txt
    # comm -12
    awk '
        BEGIN {
            FS=""
               }                        # preserve whitespace
        (NR==FNR) {
            ll1[FNR]=$0; nl1=FNR
                   }                    # file1, index by lineno
        (NR!=FNR) {
            ss2[$0]++
                  }                     # file2, index by string
        END {
            for (ll=1; ll<=nl1; ll++) if (!(ll1[ll] in ss2)) print ll1[ll]
        }
        ' /tmp/dataApps.txt /tmp/casks.txt | column > "${1}"
    
}


# Options
while getopts ":-:abncCh" OPTION
do
        case $OPTION in
                -)  #Long options for bash (without GNU)
                    case $OPTARG in
                        list-applications)
                            list_applications ;;
                        list-brew)
                            list_casks ;;
                        help)
                            display_help ;;
                        compile)
                            perl_compile && \
                            echo -e "${BGREEN}Successfully compiled application data in \`~/scripts/perl\`.${NORM}";;
                        Compare)
                            compare_lists ;;
                        no-interaction)
                            no_interaction "${2}" ;;
                        *)
                            opt_err ;;
                    esac ;;
                a)
                    list_applications ;;
                b)
                    list_casks ;;
                c)
                    perl_compile && \
                    echo -e "${BGREEN}Successfully compiled Homebrew casks in \`~/scripts/perl/casks.txt\` and application data (minus app store and Apple data) in \`~/scripts/perl/dataApps.txt\`.${NORM}";;
                C)
                    compare_lists ;;
                n)
                    no_interaction "${2}" ;;
                h)
                    display_help ;;
                *)
                    opt_err ;;
        esac
done
