#! /bin/bash

BASH_DIR="${HOME}/scripts/bash/"
TRASH_SHARED_DIR="${HOME}/Library/Mobile Documents/com~apple~CloudDocs/.Trash/"
TRASH_LOCAL_DIR="${HOME}/.Trash/"
TRASH_ROOT_DIR="/private/var/root/.Trash/"
DOWNLOADS_DIR="${HOME}/Downloads/"

# Ensure jq is installed
source ${BASH_DIR}/dependencies/jq-dep.sh

# Colours
source ${BASH_DIR}/colours/json-colour-parser.sh

# Brew Install function
source ${BASH_DIR}/dependencies/brew-install-dep.sh


# Satisfy Dependencies
brew_install "${SATISFYING_DEPS}" ruby rbenv ruby-build && \
echo -e "${DEPS_SATISFIED}"

# Help
display_help() {
    echo -e "${BWHITE}Usage: [sudo] clean [option...]${NORM}"
    echo
    echo -e "${ITWHITE}The present script will help to clear deprecated files.  ${ITRED}Omitting option altogether will iteratively delete everything in both Trash and Downloads.${NORM}"
    echo
    echo -e "${BBLUE}\t -t | --trash \t\t${BYELLOW}Iteratively ${BRED}deletes everything in ${ULINE}${BBLUE}t${BRED}rash${NORM} ${BYELLOW}(shared and local).${NORM}"
    echo -e "${BBLUE}\t -d | --downloads \t${BYELLOW}Iteratively ${BRED}deletes everything in ${ULINE}${BBLUE}d${BRED}ownloads${NORM}${BRED} folder.${NORM}"
    echo -e "${BBLUE}\t -b | --brew \t\t${BYELLOW}Updates and then cleans up home${ULINE}${BBLUE}b${BYELLOW}rew${NORM}${BYELLOW}.${NORM}"
    echo -e "${BBLUE}\t -r | --ruby \t\t${BYELLOW}Updates and then cleans up ${ULINE}${BBLUE}r${BYELLOW}uby gems${NORM}${BYELLOW}.${NORM}"
    echo -e "${BBLUE}\t -m | --mas \t\t${BYELLOW}Updates your ${ULINE}${BBLUE}m${BYELLOW}acOS App Store${NORM}${BYELLOW} applications.${NORM}"
    echo -e "${BBLUE}\t -h | --help \t\t${BYELLOW}Shows ${ULINE}${BBLUE}h${BYELLOW}elp${NORM} ${BYELLOW}(present output).${NORM}"
    clean-exit
}


size_of_dir() { 
    DIR_SIZE=$(sudo find "${1}" ! -type d -print0 | xargs -0 stat -f '%z' | awk '{sum += $1} END{print sum}')  # Finds total space taken up by dir in bytes.  Not my own code: https://unix.stackexchange.com/a/177371/372726
    echo "${DIR_SIZE}" 
    }
    
    
human_readable_bytes() {
    if [[ $1 -ge 0 ]] && [[ $1 -lt 1024 ]]
    then
        SIZE="${1}"
        TYPE="B"
    elif [[ $1 -ge 1024 ]] && [[ $1 -lt 1048576 ]]
    then
        SIZE=$(echo "$((${1} / 1024))")
        TYPE="KB"
    elif [[ $1 -ge 1048576 ]] && [[ $1 -lt 1073741824 ]]
    then
        SIZE=$(echo "$((${1} / 1048576))")
        TYPE="MB"
    elif [[ $1 -ge 1073741824 ]] && [[ $1 -lt 1099511627776 ]]
    then
        SIZE=$(echo "$((${1} / 1073741824))")
        TYPE="GB"
    elif [[ $1 -gt 10995116277760 ]]
    then
        SIZE=$(echo "$((${1} / 1099511627776))")
        TYPE="TB"
    fi
    echo "${SIZE} ${TYPE}"
}


deleted_t() {
    SHARED_BYTES=$(size_of_dir "${TRASH_SHARED_DIR}")
    LOCAL_BYTES=$(size_of_dir "${TRASH_LOCAL_DIR}")
    ROOT_BYTES=$(size_of_dir "${TRASH_ROOT_DIR}")
    SIZE_DIRS=$(echo "$((${SHARED_BYTES} + ${ROOT_BYTES} + ${LOCAL_BYTES}))")
    SIZE=$(human_readable_bytes ${SIZE_DIRS})
    echo -e "${BGREEN}Deleted ${SIZE} from trash.${NORM}"
}


deleted_d() {
    SIZE_DIR=$(size_of_dir "${DOWNLOADS_DIR}")
    SIZE=$(human_readable_bytes ${SIZE_DIR})
    echo -e "${BGREEN}Deleted ${SIZE} from downloads.${NORM}"
}


deleted_all() {
    SHARED_T_BYTES=$(size_of_dir "${TRASH_SHARED_DIR}")
    LOCAL_T_BYTES=$(size_of_dir "${TRASH_LOCAL_DIR}")
    ROOT_T_BYTES=$(size_of_dir "${TRASH_ROOT_DIR}")
    D_BYTES=$(size_of_dir "${DOWNLOADS_DIR}")
    SIZE_DIRS=$(echo "$((${SHARED_T_BYTES} + ${LOCAL_T_BYTES} + ${ROOT_T_BYTES} + ${D_BYTES}))")
    SIZE=$(human_readable_bytes ${SIZE_DIRS})
    echo -e "${BGREEN}Deleted ${SIZE} from trash and downloads. ${NORM}"
}


clean_function() {
    while true; do
        read -p "${1}" yn
        case $yn in
            [Yy]*) 
                    return 0 ;;
            [Nn]*) 
                    clean-exit ;;
            *)     
                    echo "${BYELLOW}Please answer yes or no.${BNORM}";;
        esac
    done
}


clean_trash() {
    declare -r DELETED_T=$(deleted_t)  # Declare readonly variable
    MSG="${BRED}Are you sure you want to delete everything in your trash?${NORM}"
    clean_function "${MSG}" && \
    sudo rm -drf "${TRASH_SHARED_DIR}"/*
    sudo rm -drf "${TRASH_LOCAL_DIR}"/*
    sudo rm -drf "${TRASH_ROOT_DIR}"/*
    sudo rm -drf "${TRASH_ROOT_DIR}"/.*
    echo $DELETED_T
}


clean_downloads() {
    declare -r DELETED_D=$(deleted_d)  # Declare readonly variable
    MSG="${BRED}Are you sure you want to delete everything in your downloads folder?${NORM}"
    clean_function "${MSG}" && \
    rm -drf "${DOWNLOADS_DIR}"/*
    echo $DELETED_D
}


#Are you sure?
clean_all() {
    declare -r DELETED_ALL=$(deleted_all)  # Declare readonly variable
    MSG="${BRED}Are you sure you want to delete everything in your trash and downloads folder?${NORM}"
    clean_function "${MSG}" && \
    sudo rm -drf "${TRASH_SHARED_DIR}"/*
    sudo rm -drf "${TRASH_LOCAL_DIR}"/*
    sudo rm -drf "${TRASH_ROOT_DIR}"/*
    sudo rm -drf "${TRASH_ROOT_DIR}"/.*
    rm -drf "${DOWNLOADS_DIR}"/*
    echo $DELETED_ALL
}


opt_err() {
    HELP="${BYELLOW}Invalid option.  Use option -h for help.${NORM}"
    echo -e "${HELP}"
	clean-exit
}


clean_brew() {  # https://superuser.com/a/975878/1100925
    brew update # Update homebrew
    brew cask upgrade
    brew upgrade  # Update outdated formula
    brew cleanup -s  # Remove outdated formula
    brew cask doctor
    brew doctor  # Check system for potential problems; https://github.com/Homebrew/legacy-homebrew/issues/20598#issuecomment-19686090
    rm -rf $(brew --cache)
    clean-exit
    #Run `brew tap beeftornado/rmtree; brew rmtree [formula]` to remove package AND dependencies
}


clean_gems() {
    sudo gem update  # https://stackoverflow.com/a/36150004/12069968
    sudo gem cleanup  # https://nathanhoad.net/how-to-clean-up-old-gems/
    clean-exit
}


# Options
while getopts ":-:tdhbmr" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        downloads)
                            clean_downloads ;;
                        trash)
                            clean_trash ;;
                        help)
                            display_help ;;
                        brew)
                            clean_brew ;;
                        ruby)
                            clean_gems ;;
                        mas)
                            mas upgrade ;;
                        *)
                            opt_err ;;
                    esac ;;
                t)
                    clean_trash ;;
                m) 
                    mas upgrade ;;
                d)  
                    clean_downloads ;;
                h)
                    display_help ;;
                b)
                    clean_brew ;;
                r)
                    clean_gems ;;
                *)
                    opt_err ;;
        esac
done


# If no options
[[ -z $1 ]] && clean_all


# Clean up
clean-exit
