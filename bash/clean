#! /bin/bash

trap "exit" INT

############ TO-DO
# PIP: sudo -H pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | sudo -H xargs -n1 pip3 install -U
# Consider using numfmt for calculating the bytes

BASH_DIR="$(realpath $(dirname $0))"
TRASH_SHARED_DIR="${HOME}/Library/Mobile Documents/com~apple~CloudDocs/.Trash/"
TRASH_LOCAL_DIR="${HOME}/.Trash/"
TRASH_ROOT_DIR="/private/var/root/.Trash/"
DOWNLOADS_DIR="${HOME}/Downloads/"

# Immediately exits script if nothing is passed to it
if [[ -z "${@}" ]]
then
    HELP="\033[1;33m You must have at least one argument.  Use -h for help. \033[0;38m"
    echo -e "${HELP}"
    exit $?
fi

if [[ -z $(command -v fd) ]]; then
	echo "You need to install fd"
fi

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh

# Help
display_help() {
    help_start '[sudo] clean [option...]' 'The present script will help to clear deprecated files.  Omitting option altogether will iteratively delete everything in both Trash and Downloads.'
    help_commands '-a' '--all' '2' 'Cleans using' 'a' 'll' 'aforementioned options.'
    help_commands '-b' '--brew' '2' 'Updates and then cleans up home' '\bb' 'rew' ' \b'
    help_commands '-d' '--downloads' '1' 'Iteratively deletes everything in the' 'd' 'ownloads' 'folder'
    help_commands '-m' '--mas' '2' 'Updates your' 'm' 'acOS App Store (mas)' 'applications.'
    help_commands '-o' '--old' '2' 'Cleans up' 'o' 'ld' 'packages that were installed automatically but are no longer needed.'
    help_commands '-p' '--perl' '2' '[OPTION IN DEVELOPMENT] Updates and then cleans up' 'p' 'erl' 'CPAN packages.'
    help_commands '-r' '--ruby' '2' 'Updates and then cleans up' 'r' 'uby' 'gems.'
    help_commands '-t' '--trash' '2' 'Iteratively deletes everything in' 't' 'rash' '(shared and local).'
    help_help '2'
    clean-exit
}


remove_old() {
    if [[ $OS == "debian" ]]
    then
        sudo apt-get autoremove
    elif [[ $OS == "arch" ]]
    then
        sudo pacman -R $(pacman -Qqdt)
    elif [[ $KERNEL == "Darwin" ]]
    then
        echo -e "${BYELLOW}This option is not currently supported for macOS.${NORM}"
    fi
}


size_of_dir() {
    DIR_SIZE=$(sudo find "${1}" ! -type d -print0 | xargs -0 stat -f '%z' | awk '{sum += $1} END{print sum}')  # Finds total space taken up by dir in bytes.  Not my own code: https://unix.stackexchange.com/a/177371/372726
    echo "${DIR_SIZE}"
    }
    
    
human_readable_bytes() {
    if [[ $1 -ge 0 ]] && [[ $1 -lt 1024 ]]
    then
        SIZE="${1}"
        TYPE="B"
    elif [[ $1 -ge 1024 ]] && [[ $1 -lt 1048576 ]]
    then
        SIZE=$(echo "$((${1} / 1024))")
        TYPE="KB"
    elif [[ $1 -ge 1048576 ]] && [[ $1 -lt 1073741824 ]]
    then
        SIZE=$(echo "$((${1} / 1048576))")
        TYPE="MB"
    elif [[ $1 -ge 1073741824 ]] && [[ $1 -lt 1099511627776 ]]
    then
        SIZE=$(echo "$((${1} / 1073741824))")
        TYPE="GB"
    elif [[ $1 -gt 10995116277760 ]]
    then
        SIZE=$(echo "$((${1} / 1099511627776))")
        TYPE="TB"
    fi
    echo "${SIZE} ${TYPE}"
}


deleted_t() {
    SHARED_BYTES=$(size_of_dir "${TRASH_SHARED_DIR}")
    LOCAL_BYTES=$(size_of_dir "${TRASH_LOCAL_DIR}")
    ROOT_BYTES=$(size_of_dir "${TRASH_ROOT_DIR}")
    SIZE_DIRS=$(echo "$((${SHARED_BYTES} + ${ROOT_BYTES} + ${LOCAL_BYTES}))")
    SIZE=$(human_readable_bytes ${SIZE_DIRS})
    echo -e "${BGREEN}Deleted ${SIZE} from trash.${NORM}"
}


deleted_d() {
    SIZE_DIR=$(size_of_dir "${DOWNLOADS_DIR}")
    SIZE=$(human_readable_bytes ${SIZE_DIR})
    echo -e "${BGREEN}Deleted ${SIZE} from downloads.${NORM}"
}


deleted_all() {
    SHARED_T_BYTES=$(size_of_dir "${TRASH_SHARED_DIR}")
    LOCAL_T_BYTES=$(size_of_dir "${TRASH_LOCAL_DIR}")
    ROOT_T_BYTES=$(size_of_dir "${TRASH_ROOT_DIR}")
    D_BYTES=$(size_of_dir "${DOWNLOADS_DIR}")
    SIZE_DIRS=$(echo "$((${SHARED_T_BYTES} + ${LOCAL_T_BYTES} + ${ROOT_T_BYTES} + ${D_BYTES}))")
    SIZE=$(human_readable_bytes ${SIZE_DIRS})
    echo -e "${BGREEN}Deleted ${SIZE} from trash and downloads. ${NORM}"
}


clean_function() {
    while true; do
        read -p "${1}" yn
        case $yn in
            [Yy]*)
                    return 0 ;;
            [Nn]*)
                    clean-exit ;;
            *)
                    echo "${BYELLOW}Please answer yes or no.${NORM}";;
        esac
    done
}


clean_trash() {
    declare -r DELETED_T=$(deleted_t)  # Declare readonly variable
    MSG="${BRED}Are you sure you want to delete everything in your trash?${NORM}"
    clean_function "${MSG}" && \
    # sudo rm -drf "${TRASH_SHARED_DIR}"/*
	fd -H . "${TRASH_SHARED_DIR}" -x sudo rm
    # sudo rm -drf "${TRASH_LOCAL_DIR}"/*
	fd -H . "${TRASH_LOCAL_DIR}" -x sudo rm
    # sudo rm -drf "${TRASH_ROOT_DIR}"/*
    # sudo rm -drf "${TRASH_ROOT_DIR}"/.*
	fd -H . "${TRASH_ROOT_DIR}" -x sudo rm
    echo $DELETED_T
}


clean_downloads() {
    declare -r DELETED_D=$(deleted_d)  # Declare readonly variable
    MSG="${BRED}Are you sure you want to delete everything in your downloads folder?${NORM}"
    clean_function "${MSG}" && \
    rm -drf "${DOWNLOADS_DIR}"/*
    echo $DELETED_D
}


#Are you sure?
clean_all() {
    declare -r DELETED_ALL=$(deleted_all)  # Declare readonly variable
    MSG="${BRED}Are you sure you want to delete everything in your trash and downloads folder?${NORM}"
    clean_function "${MSG}" && \
    # sudo rm -drf "${TRASH_SHARED_DIR}"/*
	fd -H . "${TRASH_SHARED_DIR}" -x sudo rm
    # sudo rm -drf "${TRASH_LOCAL_DIR}"/*
	fd -H . "${TRASH_LOCAL_DIR}" -x sudo rm
    # sudo rm -drf "${TRASH_ROOT_DIR}"/*
    # sudo rm -drf "${TRASH_ROOT_DIR}"/.*
	fd -H . "${TRASH_ROOT_DIR}" -x sudo rm
    # rm -drf "${DOWNLOADS_DIR}"/*
	fd -H . "${DOWNLOADS_DIR}" -x sudo rm
    echo $DELETED_ALL
}


clean_brew() {  # https://superuser.com/a/975878/1100925
    if [[ $OS == 'macos' ]]
    then
        BIG_LINE=$(seq -s= $(tput cols) | tr -d '[:digit:]')
        echo -e "${ITYELLOW}Updating Homebrew Core${NORM}"
        brew update # Update homebrew
        echo
        echo -e "${BWHITE}${BIG_LINE}${NORM}"
        echo -e "${ITYELLOW}About to update Homebrew Casks (applications)${NORM}"
    #    brew cask upgrade --greedy --dry-run
        while true; do
            read -p "${BWHITE}`brew cask upgrade --greedy --dry-run | tr , '\n' | sed 's/^[[:space:]]*//g'`
            `echo`
            ${BRED}Are you sure you want to upgrade the above casks?  It may be best to quit the applications before upgrading.  ${BWHITE}Say \'no\' for fewer upgrades (less greedy upgrade).`echo -e $'\\n'`${NORM}" yn
            case $yn in
                [Yy]*)
                        brew upgrade --cask --greedy
                        break   ;;
                [Nn]*)
                        while true; do
                            read -p "${BWHITE}`brew cask upgrade --dry-run | tr , '\n' | sed 's/^[[:space:]]*//g'`
                            `echo`
                            ${BRED}Are you sure you want to upgrade the above casks?  It may be best to quit the applications before upgrading.`echo -e $'\\n'`${NORM}" yn
                            case $yn in
                                [Yy]*)
                                        brew upgrade --cask
                                        break   ;;
                                [Nn]*)
                                        break  ;;
                                *)
                                        echo -e "${BYELLOW}Please answer [y]es or [n]o.${NORM}";;
                                esac
                            done
                        break  ;;
                *)
                        echo -e "${BYELLOW}Please answer [y]es or [n]o.${NORM}";;
            esac
        done
        echo
        echo -e "${BWHITE}${BIG_LINE}${NORM}"
        echo -e "${ITYELLOW}Updating Homebrew Formulae${NORM}"
        brew upgrade  # Update outdated formula
        echo
        echo -e "${BWHITE}${BIG_LINE}${NORM}"
        echo -e "${ITYELLOW}Removing Outdated Formula${NORM}"
        brew cleanup -s  # Remove outdated formula
        echo
        echo -e "${BWHITE}${BIG_LINE}${NORM}"
        echo -e "${ITYELLOW}Running Homebrew Doctor for potential problems${NORM}"
        brew doctor --cask
        brew doctor  # Check system for potential problems; https://github.com/Homebrew/legacy-homebrew/issues/20598#issuecomment-19686090
        echo
        echo -e "${BWHITE}${BIG_LINE}${NORM}"
        echo -e "${ITYELLOW}Clearing Homebrew Cache${NORM}"
        ls $(brew --cache)
        rm -rf $(brew --cache)
        #Run `brew tap beeftornado/rmtree; brew rmtree [formula]` to remove package AND dependencies
    else
        echo "${BRED}Please use your default package manager, ${PACMAN}.${NORM}"
        exit 0
    fi
}


clean_gems() {
    # get os-specific dependencies
    case $OS in
        macos)
            is-command-then-install  "${RUBY_PACKAGE}" "${RUBY_VERSION}" "${RUBY_BUILD}"
            ;;
        debian)
            is-command-then-install "${RUBY_PACKAGE}"
            declare -a debian_ruby_array=('ruby-charlock-holmes' 'ruby-escape-utils' 'ruby-rugged')
            for i in "${debian_ruby_array[@]}"
            do
                is-library-then-install "${i}"
            done
            ;;
        arch)
            is-command-then-install "${RUBY_PACKAGE}"
            aur_install "${RUBY_VERSION}" 'https://aur.archlinux.org/cgit/aur.git/snapshot/rbenv.tar.gz'
            aur_install "${RUBY_BUILD}" 'https://aur.archlinux.org/cgit/aur.git/snapshot/ruby-build.tar.gz'
            ;;
        fedora)
            is-command-then-install "${RUBY_PACKAGE}"
            ;;
    esac
    
    sudo gem update  # https://stackoverflow.com/a/36150004/12069968
    sudo gem cleanup  # https://nathanhoad.net/how-to-clean-up-old-gems/
}

clean_perl() {
    # get os-specific dependencies
    case $OS in
        macos)
            is-library-then-install "${CPANM}"
            ;;
    esac
    
    # get dependencies regardless of kernel and os
    is-command-then-install "${PERL_PACKAGE}"
    
	# perl -MCPAN -e "upgrade /(.\*)/"
	# perl -MCPAN -e shell
	# perl -MCPAN -e 'install Bundle::CPAN>; reload index; reload cpan'
	# https://stackoverflow.com/questions/40072946/
	# export PERL_MM_USE_DEFAULT=1
	# perl -MCPAN -e 'install Bundle::CPAN'
	# perl -MCPAN -e 'reload index'
	# perl -MCPAN -e 'reload cpan'
}


mas_upgrade() {
    if [[ ${KERNEL} == "Darwin" ]]
    then
        # get os-specific dependencies
        case $OS in
            macos)
                is-library-then-install "${CPANM}"
                ;;
        esac
        
        mas upgrade
    elif [[ ${KERNEL} == "Linux" ]]
    then
        echo -e "${BYELLOW}This option is not supported for Linux, as it pertains to the Mac App Store.${NORM}"
    fi
}


big_clean() {
    BIG_LINE=$(seq -s= $(tput cols) | tr -d '[:digit:]')
    echo -e "${BYELLOW}CLEANING DOWNLOADS${NORM}"
    clean_downloads
    echo
    echo -e "${BGREEN}${BIG_LINE}${NORM}"
    echo -e "${BYELLOW}CLEANING TRASH${NORM}"
    clean_trash
    echo
    echo -e "${BGREEN}${BIG_LINE}${NORM}"
    echo -e "${BYELLOW}CLEANING HOMEBREW${NORM}"
    clean_brew
    echo
    echo -e "${BGREEN}${BIG_LINE}${NORM}"
    echo -e "${BYELLOW}CLEANING RUBY${NORM}"
    clean_gems
    echo
    echo -e "${BGREEN}${BIG_LINE}${NORM}"
    echo -e "${BYELLOW}CLEANING CPANM PACKAGES${NORM}"
    clean_perl
    echo
    echo -e "${BGREEN}${BIG_LINE}${NORM}"
    echo -e "${BYELLOW}CLEANING APPS FROM THE APPLE APP STORE${NORM}"
    mas upgrade
}


# Options
while getopts ":-:tdhpbmrao" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        old)
                            remove_old
                            clean-exit ;;
                        all)
                            big_clean
                            clean-exit ;;
                        downloads)
                            clean_downloads
                            clean-exit ;;
                        trash)
                            clean_trash
                            clean-exit ;;
                        help)
                            display_help ;;
                        brew)
                            clean_brew
                            clean-exit ;;
                        perl)
                            clean_perl
                            clean-exit ;;
                        ruby)
                            clean_gems
                            clean-exit ;;
                        mas)
                            mas_upgrade
                            clean-exit ;;
                        *)
                            opt_err ;;
                    esac ;;
                o)
                    remove_old
                    clean-exit ;;
                a)
                    big_clean
                    clean-exit ;;
                t)
                    clean_trash
                    clean-exit ;;
                m)
                    mas_upgrade
                    clean-exit ;;
                d)
                    clean_downloads
                    clean-exit ;;
                h)
                    display_help ;;
                b)
                    clean_brew
                    clean-exit ;;
                p)
                    clean_perl
                    clean-exit ;;
                r)
                    clean_gems
                    clean-exit ;;
                *)
                    opt_err ;;
        esac
done


# If no options
[[ -z $1 ]] && clean_all


# Clean up
clean-exit
