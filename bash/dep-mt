#! /bin/bash

BASH_DIR="${HOME}/bin/scripts/bash/"

# Ensure jq is installed
source ${BASH_DIR}/dependencies/jq-dep.sh

# Colours
source ${BASH_DIR}/colours/json-colour-parser.sh

# define local variables
IDE_DIR="${HOME}/Applications/JetBrains Toolbox/IntelliJ IDEA Community Release.app"
IDE="IntelliJ"
DESIRED_BRANCH="1.14.4"
MT="${BGREEN}Modding time!${NORM}"
OPT_ERR="${BYELLOW}$1 is not a valid option.  Use option -h for help.${NORM}"
DIRTY_BRANCH="${BRED}Do something with untracked or uncommitted changes.${NORM}"

display_help() {
    echo -e "${BWHITE}Usage: mt [option...]${NORM}"
    echo
    echo -e "${ITWHITE}The present script will, by default, check to see if the modding branch 1.14.4 is clean, and go to that branch.  Need to manually run \`brew cask install intellij-idea-ce\`${NORM}"
    echo
    echo -e "${BBLUE}\t -a | --application \t${BYELLOW}Opens ${ULINE}${BBLUE}a${BYELLOW}pplication${NORM}${BYELLOW} IntelliJ.${NORM}"
    echo -e "${BBLUE}\t -b | --branch \t\t${BYELLOW}Stays on current ${ULINE}${BBLUE}b${BYELLOW}ranch${NORM}${BYELLOW}.${NORM}"
    echo -e "${BBLUE}\t -h | --help \t\t${BYELLOW}Shows ${ULINE}${BBLUE}h${BYELLOW}elp${NORM}${BYELLOW} (present output).${NORM}"
    # Clean up
    clean-return
}


# Help
while getopts ":-:h" OPTION; do
    case $OPTION in
        h)
            display_help ;;
        -)
            case $OPTARG in
                help)
                    display_help ;;
            esac ;; 
    esac
done


# changes directory
cd ~/IntelliJProjects/Electrum || clean-return


BRANCH=$(git rev-parse --abbrev-ref HEAD)
CLEANLINESS=$(git status --porcelain)

opt_a() {
    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
    then
        git pull && \
        open -a "${IDE_DIR}" && \
        echo -e "${MT}"
    else
        git checkout "${DESIRED_BRANCH}" && \
        git pull && \
        open -a "${IDE_DIR}" && \
        echo -e "${MT}"
    fi
}


opt_b() {
    git pull && \
    open -a "${IDE_DIR}" && \
    echo -e "${MT}"
}


opt_err() {
    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
    then
       echo -e "${OPT_ERR}" 
    else
        git checkout "${DESIRED_BRANCH}" && \
        echo -e "${OPT_ERR}"
    fi
    clean-return
}


# If dirty
[[ ! -z "$CLEANLINESS" ]] && \
echo -e "${DIRTY_BRANCH}" && \
exec bash && \
clean-return


# Options
while getopts ":-:ab" OPTION; do
        case $OPTION in
                -)
                    case $OPTARG in
                        application)
                            opt_a ;;
                        branch)
                            opt_b ;;
                    esac ;;
                a)
                    opt_a ;;
                b)  
                    opt_b ;;
                *)
                    opt_err ;;
        esac
done


# Default option (if empty)
if [[ -z $1 ]]
then
    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
    then
        git pull && \
        echo -e "${MT}"
    else
        git checkout "${DESIRED_BRANCH}" && \
        git pull && \
        echo -e "${MT}"
    fi
fi


#clean up
clean-return
