#! /bin/bash
# Script for modding time!
# ensure  brew install ghi

# changes directory
cd ~/IntelliJProjects/Electrum

# define local variables
BRANCH=$(git rev-parse --abbrev-ref HEAD)
CLEANLINESS=$(git status --porcelain)
IDE_DIR="/Users/jakeireland/Applications/JetBrains Toolbox/IntelliJ IDEA Community Release.app"
IDE="IntelliJ"
DESIRED_BRANCH="1.14.4"
MT="\033[1;38;5;2mModding time!\033[0;38m"
OPT_ERR="\033[1;33m$1 is not a valid option.  Use option -h for help.\033[0;38m"
DIRTY_BRANCH="\033[01;31mDo something with untracked or uncommitted changes.\033[0;38m"

display_help() {
    echo -e "\033[1;38mUsage: mt [option...]\033[0;38m"
    echo
    echo -e "\033[1;3;38mThe present script will check to see if the modding branch 1.14.4 is clean, and go to that branch, as well as open IntelliJ.  You will have to run the command again with a `.` at the front in order to cd to this repo.\033[0;38m"
    echo
    echo -e "\033[1;38;5;26m   -a           \033[1;33mOpens IntelliJ\033[0;38m"
    echo -e "\033[1;38;5;26m   -b           \033[1;33mStays on current branch.\033[0;38m"
    echo -e "\033[1;38;5;26m   -h           \033[1;33mShows help (present output).\033[0;38m"
    exit $?
}

if [[ ! -z "$CLEANLINESS" ]]
then
    echo -e "${DIRTY_BRANCH}" && \
    exit $?
fi


while getopts ":abh" OPTION; do
        case $OPTION in
                a)
                    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
                    then
                        git pull && \
                        open -a "${IDE_DIR}" && \
                        echo -e "${MT}"
                    else
                        git checkout "${DESIRED_BRANCH}" && \
                        git pull && \
                        open -a "${IDE_DIR}" && \
                        echo -e "${MT}"
                    fi
                    ;;
                b)  
                    git pull && \
                    open -a "${IDE_DIR}" && \
                    echo -e "${MT}"
                    ;;
                h)
                    display_help
                    ;;
                \?)
                    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
                    then
                       echo -e "${OPT_ERR}" 
                    else
                        git checkout "${DESIRED_BRANCH}" && \
                        echo -e "${OPT_ERR}"
                    fi
                    exit $?
                    ;;
        esac
done

if [[ -z $1 ]]
then
    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
    then
        git pull && \
        echo -e "${MT}"
    else
        git checkout "${DESIRED_BRANCH}" && \
        git pull && \
        echo -e "${MT}"
    fi
fi

exec bash
