#! /bin/bash
# Script for modding time!

BASH_DIR="/Users/jakeireland/bin/scripts/bash/"

clean-exit() {
    if [[ -f ${BASH_DIR}/textcolours.txt ]]
    then
        rm /Users/jakeireland/bin/scripts/bash/textcolours.txt
    fi
    exit $?
}

# Colours
jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${BASH_DIR}/textcolours.json | sed -e 's/=\([^" >][^ >]*\)/="\1"/g' >> ${BASH_DIR}/textcolours.txt && source ${BASH_DIR}/textcolours.txt

# changes directory
cd ~/IntelliJProjects/Electrum || clean-exit

# define local variables
BRANCH=$(git rev-parse --abbrev-ref HEAD)
CLEANLINESS=$(git status --porcelain)
IDE_DIR="/Users/jakeireland/Applications/JetBrains Toolbox/IntelliJ IDEA Community Release.app"
IDE="IntelliJ"
DESIRED_BRANCH="1.14.4"
MT="\033[1;38;5;2mModding time!\033[0;38m"
OPT_ERR="\033[1;33m$1 is not a valid option.  Use option -h for help.\033[0;38m"
DIRTY_BRANCH="\033[01;31mDo something with untracked or uncommitted changes.\033[0;38m"

display_help() {
    echo -e "\033[1;38mUsage: mt [option...]\033[0;38m"
    echo
    echo -e "\033[1;3;38mThe present script will, by default, check to see if the modding branch 1.14.4 is clean, and go to that branch.\033[0;38m"
    echo
    echo -e "\033[1;38;5;26m   -a           \033[1;33mOpens \033[1;38;5;26ma\033[1;33mpplication IntelliJ\033[0;38m"
    echo -e "\033[1;38;5;26m   -b           \033[1;33mStays on current \033[1;38;5;26mb\033[1;33mranch.\033[0;38m"
    echo -e "\033[1;38;5;26m   -h           \033[1;33mShows \033[1;38;5;26mh\033[1;33melp (present output).\033[0;38m"
    # Clean up
    clean-exit
}


# Help
while getopts "h" OPTION; do
    case $OPTION in
        h)
            display_help
            ;; 
    esac
done


# If dirty
if [[ ! -z "$CLEANLINESS" ]]
then
    echo -e "${DIRTY_BRANCH}" && \
    exec bash && \
    clean-exit
fi


# Options
while getopts ":ab" OPTION; do
        case $OPTION in
                a)
                    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
                    then
                        git pull && \
                        open -a "${IDE_DIR}" && \
                        echo -e "${MT}"
                    else
                        git checkout "${DESIRED_BRANCH}" && \
                        git pull && \
                        open -a "${IDE_DIR}" && \
                        echo -e "${MT}"
                    fi
                    ;;
                b)  
                    git pull && \
                    open -a "${IDE_DIR}" && \
                    echo -e "${MT}"
                    ;;
                \?)
                    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
                    then
                       echo -e "${OPT_ERR}" 
                    else
                        git checkout "${DESIRED_BRANCH}" && \
                        echo -e "${OPT_ERR}"
                    fi
                    clean-exit
                    ;;
        esac
done


# Default option (if empty)
if [[ -z $1 ]]
then
    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
    then
        git pull && \
        echo -e "${MT}"
    else
        git checkout "${DESIRED_BRANCH}" && \
        git pull && \
        echo -e "${MT}"
    fi
fi


#clean up
if [[ -f ${BASH_DIR}/textcolours.txt ]]
then
    rm /Users/jakeireland/bin/scripts/bash/textcolours.txt
fi
exec bash