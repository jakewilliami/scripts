#! /bin/bash
# Script for modding time!

BASH_DIR="/Users/jakeireland/bin/scripts/bash/"

clean-exit() {
    [ -f ${BASH_DIR}/textcolours.txt ]] && \
    rm /Users/jakeireland/bin/scripts/bash/textcolours.txt
    exit $?
}

# Colours
jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${BASH_DIR}/textcolours.json | sed -e 's/=\([^" >][^ >]*\)/="\1"/g' >> ${BASH_DIR}/textcolours.txt && source ${BASH_DIR}/textcolours.txt

# changes directory
cd ~/IntelliJProjects/Electrum || clean-exit

# define local variables
BRANCH=$(git rev-parse --abbrev-ref HEAD)
CLEANLINESS=$(git status --porcelain)
IDE_DIR="/Users/jakeireland/Applications/JetBrains Toolbox/IntelliJ IDEA Community Release.app"
IDE="IntelliJ"
DESIRED_BRANCH="1.14.4"
MT="${BGREEN}Modding time!${NORM}"
OPT_ERR="${BYELLOW}$1 is not a valid option.  Use option -h for help.${NORM}"
DIRTY_BRANCH="${BRED}Do something with untracked or uncommitted changes.${NORM}"

display_help() {
    echo -e "${BWHITE}Usage: mt [option...]${NORM}"
    echo
    echo -e "${ITBWHITE}The present script will, by default, check to see if the modding branch 1.14.4 is clean, and go to that branch.${NORM}"
    echo
    echo -e "${BBLUE}\t -a \t${BYELLOW}Opens ${BBLUE}a${BYELLOW}pplication IntelliJ${NORM}"
    echo -e "${BBLUE}\t -b \t${BYELLOW}Stays on current ${BBLUE}b${BYELLOW}ranch.${NORM}"
    echo -e "${BBLUE}\t -h \t${BYELLOW}Shows ${BBLUE}h${BYELLOW}elp (present output).${NORM}"
    # Clean up
    clean-exit
}


# Help
while getopts "h" OPTION; do
    case $OPTION in
        h)
            display_help
            ;; 
    esac
done


# If dirty
[[ ! -z "$CLEANLINESS" ]] && \
echo -e "${DIRTY_BRANCH}" && \
exec bash && \
clean-exit


# Options
while getopts ":ab" OPTION; do
        case $OPTION in
                a)
                    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
                    then
                        git pull && \
                        open -a "${IDE_DIR}" && \
                        echo -e "${MT}"
                    else
                        git checkout "${DESIRED_BRANCH}" && \
                        git pull && \
                        open -a "${IDE_DIR}" && \
                        echo -e "${MT}"
                    fi
                    ;;
                b)  
                    git pull && \
                    open -a "${IDE_DIR}" && \
                    echo -e "${MT}"
                    ;;
                \?)
                    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
                    then
                       echo -e "${OPT_ERR}" 
                    else
                        git checkout "${DESIRED_BRANCH}" && \
                        echo -e "${OPT_ERR}"
                    fi
                    clean-exit
                    ;;
        esac
done


# Default option (if empty)
if [[ -z $1 ]]
then
    if [ "$BRANCH" = "${DESIRED_BRANCH}" ]
    then
        git pull && \
        echo -e "${MT}"
    else
        git checkout "${DESIRED_BRANCH}" && \
        git pull && \
        echo -e "${MT}"
    fi
fi


#clean up
[[ -f ${BASH_DIR}/textcolours.txt ]] && \
rm /Users/jakeireland/bin/scripts/bash/textcolours.txt
exec bash
