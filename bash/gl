#! /usr/bin/env bash
#Future: `brew install yarn && yarn global add taskbook`?

trap "exit" INT

# define bash directory
BASH_DIR="${HOME}"/scripts/bash/

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh


# Help
display_help() { #Displays help
    help_start 'gl [option...]' 'The present script will print a Git log of things that one may find useful or want to know.  See below for options.  By default, it will print the past ten commits to the current branch, not including merges.'
    help_commands '-c' '--commit-count' '1' 'Prints the current' 'c' 'ommit count' 'on working branch in the past 24 hours'
    help_commands '-s' '--status' '2' 'Prints current git' 's' 'tatus' 'minimally.'
    help_commands '-i' '--issues' '2' 'Prints currently open' 'i' 'ssues' 'in present repository.'
    help_commands '-b' '--branch' '2' 'Lists local' 'b' 'ranches' 'of current repository; highlights current branch.'
    help_commands '-t' '--tags | --labels' '1' 'Lists this repository\x27s issues\x27' 't' 'ags/labels' '.'
    help_commands '-l' '--languages' '1' 'Prints' 'l' 'anguage' 'breakdown in present repository.'
    help_commands '-f' '--filtered-issues' '1' 'Prints' 'f' 'iltered issues' 'by tag.  By default, prints issues tagged with "enhancement" unless stated otherwise.'
    help_commands '-e' '--exclude-issues' '1' 'Prints issues' 'e' 'xcluding issues' 'that are tagged with "depricated" and "pdfsearch" unless stated otherwise.'
    help_help '2'
    help_examples '===>\tIf you run into issues installing `github-linguist` for the `-l` option, see:'
    help_examples '\thttps://github.com/github/linguist/issues/4484#issuecomment-479612716, https://github.com/github/linguist/issues/4484#issuecomment-510073475'
    help_examples '\thttps://github.com/castwide/vscode-solargraph/issues/78#issuecomment-535211712, https://github.com/castwide/vscode-solargraph/issues/78#issuecomment-535210783'
    help_examples '\thttps://stackoverflow.com/questions/27438457/xcode-6-1-how-to-uninstall-command-line-tools#29859370, https://stackoverflow.com/questions/9329243/how-to-install-xcode-command-line-tools#9329325'
    help_examples '\thttps://github.com/github/linguist/issues/4449#issuecomment-470208078'
    help_examples '===>\tI have also had issues with the dynamic library that charlock_holmes uses:'
    help_examples '\thttps://github.com/github/linguist/issues/4879'
    clean-exit
}


get_languages() {

    # get os-specific dependencies
    case $OS in
        macos)
            is-library-then-install  "${RUBY_PACKAGE}" "${RUBY_VERSION}" "${RUBY_BUILD}"
            gem_install "${GHLINGUIST}"
            ;;
        debian)
            is-command-then-install "${RUBY_PACKAGE}"
            declare -a debian_ruby_array=('ruby-charlock-holmes' 'ruby-escape-utils' 'ruby-rugged')
            for i in "${debian_ruby_array[@]}"
            do
                is-library-then-install "${i}"
            done
            is-library-then-install "${GHLINGUIST}"
            ;;
        arch)
            is-command-then-install "${RUBY_PACKAGE}"
            aur_install "${RUBY_VERSION}" 'https://aur.archlinux.org/cgit/aur.git/snapshot/rbenv.tar.gz'
            aur_install "${RUBY_BUILD}" 'https://aur.archlinux.org/cgit/aur.git/snapshot/ruby-build.tar.gz'
            gem_install "${GHLINGUIST}"
            ;;
        fedora)
            is-command-then-install "${RUBY_PACKAGE}"
            gem_install "${GHLINGUIST}"
            ;;
    esac
    
    truncate -s0 /tmp/languages
    truncate -s0 /tmp/langName
    truncate -s0 /tmp/langPercent
    
    github-linguist > /tmp/languages
    
}


languageBreakdown() {
    
    get_languages
    
    while read line
    do
        
        LANG_PERCENT="$(echo "${line}" | awk '{ OFS='\t' } { print $1 }')"
        LANG_NAME="$(echo "${line}" | awk 'BEGIN { OFS='\t' } { $1=""; gsub ("-", "", $0); gsub ("+", "P", $0); print toupper($0) }')"
        
        echo "${LANG_PERCENT}" >> /tmp/langPercent
        echo "${LANG_NAME}" >> /tmp/langName
        
    done < /tmp/languages
    
}


print_language_breakdown() { # Prints language breakdown

    languageBreakdown
    
    while read line <&3 && read percentage <&4 && read name <&5
    do
        echo -en "${!name}${line}${NORM}\n" # the `${!i}` expands variables indirectly from colours defined above (http://mywiki.wooledge.org/BashFAQ/006#Indirection)
    done 3</tmp/languages 4</tmp/langpercent 5</tmp/langName  # need to sort the output by unique keys because: if n languages have the same percentage, they will both print n times.
    
}


opt_s() { # Prints what in repo has been altered since last commit + push
    git status --short --branch
}

opt_c() { # Prints commit count
    if [[ ${KERNEL} == "Darwin" ]]
    then
        START_TODAY=$(date -v 0H -v 0M -v 0S +%s)
    elif [[ ${KERNEL} == "Linux" ]]
    then
        START_TODAY=$(date -d"$(date +%D)" +%s)
    fi
    NOW=$(date +%s)
    COMMIT_NUMBER_TODAY=$(git rev-list --count --since=$START_TODAY --before=$NOW HEAD)
    REPO_NAME=$(basename $(git rev-parse --show-toplevel))
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo -e "\033[1;38;5;2mYou have made $COMMIT_NUMBER_TODAY commits to $REPO_NAME/$BRANCH today.\033[0;38m"
}

opt_b() { #Prints working branch
    git branch
}


opt_t() { #Prints tags/labels available for use
    # get dependencies regardless of kernel and os
    gem_install "${GHI}"
    
    ghi label --list
}


opt_i() { # Prints open issues
    # get dependencies regardless of kernel and os
    gem_install "${GHI}"

    ghi list
}


opt_filtered_not_i() {
    # get dependencies regardless of kernel and os
    gem_install "${GHI}"

    if [[ -z "${@}" ]]
    then
        ghi list -N "depricated pdfsearch"
    else
        ghi list -N "${@}"
    fi
}


opt_filtered_i() {
    # get dependencies regardless of kernel and os
    gem_install "${GHI}"

    if [[ -z "${@}" ]]
    then
        ghi list -L "enhancement feature"
    else
        ghi list -L "${@}"
    fi
}


# Options
while getopts ":-:escbtiflh" OPTION
do
        case $OPTION in
                -)  #Long options for bash (without GNU)
                    case $OPTARG in
                        status)
                            opt_s ;;
                        commit-count)
                            opt_c ;;
                        branch)
                            opt_b ;;
                        tags)
                            opt_t ;;
                        labels)
                            opt_t ;;
                        issues)
                            opt_i ;;
                        exclude-issues)
                            opt_filtered_not_i "${@:2}" ;;
                        filter-issues)
                            opt_filtered_i "${@:2}" ;;
                        languages)
                            print_language_breakdown ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                s)
                    opt_s ;;
                c)
                    opt_c ;;
                b)
                    opt_b ;;
                t)
                    opt_t ;;
                i)
                    opt_i ;;
                e)
                    opt_filtered_not_i "${@:2}" ;;
                f)
                    opt_filtered_i "${@:2}" ;;
                l)
                    print_language_breakdown ;;
                h)
                    display_help ;;
                *)
                    opt_err ;;
        esac
done


# get dependencies regardless of kernel and os
is-library-then-install "${ICU}"
is-command-then-install "${PERL_PACKAGE}" "${CMAKE}" "${PKG_CONFIG}"

# Pretty git log
if [[ -z "${1}" ]]
then
    LOGNUMBER="10"
else
    LOGNUMBER="${1}"
fi
git_log() { # checks to see if my username is one of the usernames, and if so, prints it in a kind of sky blue colour (so that others' commits are emphasised)
    git log --color --no-merges --pretty=format:\
"%C(bold yellow)%h%Creset -%C(bold green)%d%Creset %s %C(bold red)(%cr)%Creset %C(bold blue)<%an>%Creset" \
--abbrev-commit -${LOGNUMBER} | perl -pe \
    ' if (/<([^>]*)>/)
        {
        if ( $1 eq "jakewilliami"  ||  $1 eq "Jake Ireland" || $1 eq "Jake W. Ireland" )
            { s/<$1>/\e[0m\e[36m$&\e[39m\e[0m/; }
        else
            { s/<$1>/\e[1m\e[34m$&\e[39m\e[0m/; }
    } '
}

if [ $OPTIND -eq 1 ]
then
    git_log
fi
shift $((OPTIND-1))


# Clean up
clean-exit
