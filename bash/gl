#! /bin/bash
#Future: `brew install yarn && yarn global add taskbook`?

# define bash directory
BASH_DIR="${HOME}"/scripts/bash/

# source required scripts
source ${BASH_DIR}/dependencies/source-dependencies.sh

# get script dependencies
is-library-then-install "${ICU}"
is-command-then-install "${PERL_PACKAGE}" "${GHI}" "${CMAKE}" "${PKG_CONFIG}" "${RUBY_PACKAGE}" "${RUBY_BUILD}" 
[[ $OS == "macos" ]] && is-command-then-install "${RUBY_VERSION}"
[[ $OS == "macos" || $OS == "arch" ]] && gem_install "${GHLINGUIST}"
[[ $OS == "debian" ]] && is-library-then-install "${GHLINGUIST}"


# Help
display_help() { #Displays help
    help_start 'gl [option...]' 'The present script will print a Git log of things that one may find useful or want to know.  See below for options.  By default, it will print the past ten commits to the current branch, not including merges.'
    help_commands '-c' '--commit-count' '1' 'Prints the current' 'c' 'ommit count' 'on working branch in the past 24 hours'
    help_commands '-s' '--status' '2' 'Prints current git' 's' 'tatus' 'minimally.'
    help_commands '-i' '--issues' '2' 'Prints currently open' 'i' 'ssues' 'in present repository.'
    help_commands '-b' '--branch' '2' 'Lists local' 'b' 'ranches' 'of current repository; highlights current branch.'
    help_commands '-t' '--tags | --labels' '1' 'Lists this repository\x27s issues\x27' 't' 'ags/labels' '.' 
    help_commands '-l' '--languages' '1' 'Prints' 'l' 'anguage' 'breakdown in present repository.'
    help_commands '-f' '--filtered-issues' '1' 'Prints' 'f' 'iltered issues' 'by tag.  By default, prints issues tagged with "enhancement" unless stated otherwise.'
    help_commands '-e' '--exclude-issues' '1' 'Prints issues' 'e' 'xcluding issues' 'that are tagged with "depricated" and "pdfsearch" unless stated otherwise.'
    help_help '2'
    help_examples 'If you run into issues installing `github-linguist` for the `-l` option, see `https://github.com/github/linguist/issues/4484`.'
    clean-exit
}


# Languages as string
languages() {  # languages | after `%` and white space | in uppercase | with spaces as underscores 
    github-linguist | \
    sed 's/.*%[[:blank:]]*//' | \
    awk '{print toupper($0)}' | \
    awk '{ gsub (" ", "_", $0); print}'
}


print_language_breakdown() { # Prints language breakdown
    LANGUAGE_BREAKDOWN_STR=$(github-linguist)
    for i in $(languages)  #"${array[@]}"  # from 0--|lowest used lang|
    do
        j=$(echo $i | awk '{ gsub ("_", " ", $0); print}')
        k=$(echo $i | awk '{ gsub ("_", "", $0); print}')
        LANGINFO=$(echo "${LANGUAGE_BREAKDOWN_STR}" | egrep -i -- "$j"$ )  # ^.*
        echo -en "${!k}$LANGINFO${NORM}\n"  # the `${!i}` expands variables indirectly from colours defined above(http://mywiki.wooledge.org/BashFAQ/006#Indirection)
    done
}


opt_s() { # Prints what in repo has been altered since last commit + push
    git status --short --branch
}

opt_c() { # Prints commit count
    if [[ $(uname -s) == "Darwin" ]]
    then
        START_TODAY=$(date -v 0H -v 0M -v 0S +%s)
    elif [[ $(uname -s) == "Linux" ]]
    then
        START_TODAY=$(date -d"$(date +%D)" +%s)
    fi
    NOW=$(date +%s)
    COMMIT_NUMBER_TODAY=$(git rev-list --count --since=$START_TODAY --before=$NOW HEAD)
    REPO_NAME=$(basename `git rev-parse --show-toplevel`)
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo -e "\033[1;38;5;2mYou have made $COMMIT_NUMBER_TODAY commits to $REPO_NAME/$BRANCH today.\033[0;38m"
}

opt_b() { #Prints working branch
    git branch
}


opt_t() { #Prints tags/labels available for use
    ghi label --list
}


opt_i() { # Prints open issues
    ghi list
}


opt_filtered_not_i() {
    if [[ -z "${@}" ]]
    then
        ghi list -N "depricated pdfsearch"
    else
        ghi list -N "${@}"
    fi
}


opt_filtered_i() {
    if [[ -z "${@}" ]]
    then
        ghi list -L "enhancement feature"
    else
        ghi list -L "${@}"
    fi
}


# Options
while getopts ":-:escbtiflh" OPTION
do
        case $OPTION in
                -)  #Long options for bash (without GNU)
                    case $OPTARG in
                        status)  
                            opt_s ;;
                        commit-count)  
                            opt_c ;;
                        branch)  
                            opt_b ;;
                        tags) 
                            opt_t ;;
                        labels)
                            opt_t ;;
                        issues)  
                            opt_i ;;
                        exclude-issues)
                            opt_filtered_not_i "${@:2}" ;;
                        filter-issues)
                            opt_filtered_i "${@:2}" ;;
                        languages)
                            print_language_breakdown ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                s)
                    opt_s ;;
                c)
                    opt_c ;;
                b)  
                    opt_b ;;
                t)  
                    opt_t ;;
                i)
                    opt_i ;;
                e) 
                    opt_filtered_not_i "${@:2}" ;;
                f) 
                    opt_filtered_i "${@:2}" ;;
                l)
                    print_language_breakdown ;;
                h)  
                    display_help ;;
                *)  
                    opt_err ;;
        esac
done


#Variables
COMMIT_NUMBER_TODAY=$(git rev-list --count --since=yesterday --before=today HEAD)
BRANCH=$(git rev-parse --abbrev-ref HEAD)
LOGNUMBER=$(if [[ -z "$1" ]]; then echo "10"; else echo "${1}"; fi)
REPO_NAME=$(basename `git rev-parse --show-toplevel`)


# Pretty git log
git_log() { # checks to see if my username is one of the usernames, and if so, prints it in a kind of sky blue colour (so that others' commits are emphasised)
    git log --color --no-merges --pretty=format:\
"%C(bold yellow)%h%Creset -%C(bold green)%d%Creset %s %C(bold red)(%cr)%Creset %C(bold blue)<%an>%Creset" \
--abbrev-commit -$LOGNUMBER | perl -pe \
    ' if (/<([^>]*)>/)
        {
        if ( $1 eq "jakewilliami"  ||  $1 eq "Jake Ireland" )
            { s/<$1>/\e[0m\e[36m$&\e[39m\e[0m/; }
        else 
            { s/<$1>/\e[1m\e[34m$&\e[39m\e[0m/; } 
    } '
}
# prints line length to 40 characters
# awk 'length > 40{$0 = substr($0, 1, 40) "..."} {printf "%-43s\n", $0}'
# COLS=$(tput cols) or in bash $COLUMNS


# find all hash codes of commits updating readme
hashes_of_readme() {
    git log --oneline -i --grep="Update readme.md" --abbrev-commit | sed -E 's/^(.{7}).*/\1/' >> ${BASH_DIR}/readme-hashes.txt
}


grepped_log() { # log without readme updates
    git_log | grep -v -f ${BASH_DIR}/readme-hashes.txt
}


lines_grepped() {  # finds how many lines from original log were taken out (a function that was originally going to be used to adjust the $LOGNUMBER needed to print (so that, despite things being grepped, you still have 10 commits shown).  I'll have to think about this one)
    git_log | grep -f ${BASH_DIR}/readme-hashes.txt | wc -l
}


# If option empty
if [[ -z $1 ]] || [[ $1 =~ ^[-+]?[0-9]+$ ]]  # if first arg is empty or a positive integer
then 
    hashes_of_readme && \
    grepped_log
fi


# Clean up
clean-exit