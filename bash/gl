#! /bin/bash
# Script for git log!  REQUIRES `perl`.
# ensure you run `brew install cmake pkg-config icu4c && gem install github-linguist` for option `-l`
# ensure you run `brew install jq`
#ensure you run `brew install yarn && yarn global add taskbook`

BASH_DIR="/Users/jakeireland/bin/scripts/bash/"


# Clean up
clean-exit() {
    [[ -f ${BASH_DIR}/textcolours.txt ]] && \
    rm /Users/jakeireland/bin/scripts/bash/textcolours.txt
    exit $?
}


# Colours
jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${BASH_DIR}/textcolours.json | sed -e 's/=\([^" >][^ >]*\)/="\1"/g' >> ${BASH_DIR}/textcolours.txt && source ${BASH_DIR}/textcolours.txt


# Help
display_help() { #Displays help
    echo -e "${BWHITE}Usage: gl [option...]${NORM}"
    echo
    echo -e "${ITWHITE}The present script will print a Git log of things that one may find useful or want to know.  See below for options.  By default, it will print the past ten commits to the current branch, not including merges.${NORM}"
    echo
    echo -e "${BBLUE}\t -c | --commit-count \t${BYELLOW}Current ${ULINE}${BBLUE}c${BYELLOW}ommit count${NORM}${BYELLOW} on working branch in the past 24 hours.${NORM}"
    echo -e "${BBLUE}\t -s | --status \t\t${BYELLOW}Prints current git ${ULINE}${BBLUE}s${BYELLOW}tatus${NORM}${BYELLOW} minimally.${BNORM}"
    echo -e "${BBLUE}\t -i | --issues \t\t${BYELLOW}Currently open ${ULINE}${BBLUE}i${BYELLOW}ssues${NORM}${BYELLOW} in repository.${BNORM}"
    echo -e "${BBLUE}\t -b | --branch \t\t${BYELLOW}Lists local ${ULINE}${BBLUE}b${BYELLOW}ranches${NORM}${BYELLOW} of current repository; highlights current branch.${BNORM}"
    echo -e "${BBLUE}\t -t | --tags | --labels\t${BYELLOW}Lists this repository's issues' ${ULINE}${BBLUE}t${BYELLOW}ags/labels${NORM}${BYELLOW}.${BNORM}" 
    echo -e "${BBLUE}\t -l | --languages \t${BYELLOW}Prints ${ULINE}${BBLUE}l${BYELLOW}anguage breakdown${NORM}${BYELLOW} in present repository.${BNORM}" | column -x
    echo -e "${BBLUE}\t -h | --help \t\t${BYELLOW}Shows ${ULINE}${BBLUE}h${BYELLOW}elp${NORM}${BYELLOW} (present output).${BNORM}" | column -x  # fold -w10
    exit $?
}

# Languages as string
languages() {  # languages | after `%` and white space | in uppercase | with spaces as underscores 
    github-linguist | \
    sed 's/.*%[[:blank:]]*//' | \
    awk '{print toupper($0)}' | \
    awk '{ gsub (" ", "_", $0); print}'
}


print_language_breakdown() { # Prints language breakdown
    LANGUAGE_BREAKDOWN_STR=$(github-linguist)
    for i in $(languages)  #"${array[@]}"  # from 0--|lowest used lang|
    do
        j=$(echo $i | awk '{ gsub ("_", " ", $0); print}')
        k=$(echo $i | awk '{ gsub ("_", "", $0); print}')
        LANGINFO=$(echo "${LANGUAGE_BREAKDOWN_STR}" | egrep -i -- "$j"$ )  # ^.*
        echo -en "${!k}$LANGINFO${NORM}\n"  # the `${!i}` expands variables indirectly from colours defined above(http://mywiki.wooledge.org/BashFAQ/006#Indirection)
    done
}


opt_s() { # Prints what in repo has been altered since last commit + push
    git status --short --branch
}


opt_c() { # Prints commit count
    NOW=$(date +%s)
    START_TODAY=$(date -v 0H -v 0M -v 0S +%s)
    COMMIT_NUMBER_TODAY=$(git rev-list --count --since=$START_TODAY --before=$NOW HEAD)
    REPO_NAME=$(basename `git rev-parse --show-toplevel`)
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo -e "\033[1;38;5;2mYou have made $COMMIT_NUMBER_TODAY commits to $REPO_NAME/$BRANCH in the past 24 hours.\033[0;38m"
}


opt_b() { #Prints working branch
    git branch
}


opt_t() { #Prints tags/labels available for use
    ghi label --list
}


opt_i() { # Prints open issues
    ghi list
}


opt_err() { #Invalid option (getopts already reported the illegal option)
    HELP="${BYELLOW}Not a valid option.  Use -h for help.${BNORM}"
    echo -e "${HELP}" && clean-exit
}


# Options
while getopts ":-:scbtilh" OPTION
do
        case $OPTION in
                -)  #Long options for bash (without GNU)
                    case $OPTARG in
                        status)  
                            opt_s ;;
                        commit-count)  
                            opt_c ;;
                        branch)  
                            opt_b ;;
                        tags) 
                            opt_t ;;
                        labels)
                            opt_t ;;
                        issues)  
                            opt_i ;;
                        languages)
                            print_language_breakdown ;;
                        help)
                            display_help ;;
                        *)
                            opt_err ;;
                    esac ;;
                s)
                    opt_s ;;
                c)
                    opt_c ;;
                b)  
                    opt_b ;;
                t)  
                    opt_t ;;
                i)
                    opt_i ;;
                l)
                    print_language_breakdown ;;
                h)  
                    display_help ;;
                *)  
                    opt_err ;;
        esac
done


#Variables
COMMIT_NUMBER_TODAY=$(git rev-list --count --since=yesterday --before=today HEAD)
BRANCH=$(git rev-parse --abbrev-ref HEAD)
LOGNUMBER=$([[ -z "$1" ]] && echo "10")
REPO_NAME=$(basename `git rev-parse --show-toplevel`)


if [[ -z $1 ]] || [[ $1 =~ ^[-+]?[0-9]+$ ]]  # if first arg is empty or a positive integer
then # checks to see if my username is one of the usernames, and if so, prints it in a kind of sky blue colour
    git log --color --no-merges --pretty=format:\
"%C(bold yellow)%h%Creset -%C(bold green)%d%Creset %s %C(bold red)(%cr)%Creset %C(bold blue)<%an>%Creset" \
--abbrev-commit -$1$LOGNUMBER | perl -pe \
    ' if (/<([^>]*)>/)
        {
        if ( $1 eq "jakewilliami"  ||  $1 eq "Jake Ireland" )
            { s/<$1>/\e[0m\e[36m$&\e[39m\e[0m/; }
        else 
            { s/<$1>/\e[1m\e[34m$&\e[39m\e[0m/; } 
    } '
fi


# Clean up
clean-exit
