#! /bin/bash
# Script for git log!  REQUIRES `perl`.
# ensure you run `brew install cmake pkg-config icu4c && gem install github-linguist` for option `-l`
# ensure you run `brew install jq`
#ensure you run `brew install yarn && yarn global add taskbook`

BASH_DIR="/Users/jakeireland/bin/scripts/bash/"
JSON_FILE=FALSE

# Colours
jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' ${BASH_DIR}/textcolours.json | sed -e 's/=\([^" >][^ >]*\)/="\1"/g' >> ${BASH_DIR}/textcolours.txt && source ${BASH_DIR}/textcolours.txt && JSON_FILE=TRUE

# Small Variabels
LOGNUMBER=$([[ -z "$1" ]] && echo "10")
COMMIT_NUMBER_TODAY=$(git rev-list --count --since=yesterday --before=today HEAD)
BRANCH=$(git rev-parse --abbrev-ref HEAD)
REPO_NAME=$(basename `git rev-parse --show-toplevel`)
GHLING=$(github-linguist)
HELP="\033[1;33mNot a valid option.  Use -h for help.\033[0;38m"

# Help
display_help() {
    echo -e "\033[1;38mUsage: gl [option...]\033[0;38m"
    echo
    echo -e "\033[1;38;5;26m   -c           \033[1;33mShows present commit count on working branch.\033[0;38m"
    echo -e "\033[1;38;5;26m   -s           \033[1;33mShows git status minimally.\033[0;38m"
    echo -e "\033[1;38;5;26m   -i           \033[1;33mShows currently open issues in working branch.\033[0;38m"
    echo -e "\033[1;38;5;26m   -l           \033[1;33mShows language breakdown in present repository (may take a minute to load as it needs to access GitHub).\033[0;38m"
    echo -e "\033[1;38;5;26m   -h           \033[1;33mShows help (present output).\033[0;38m"
    exit $?
}

# Languages as string
languages() {  # languages | after `%` and white space | in uppercase | with spaces as underscores 
    github-linguist | \
    sed 's/.*%[[:blank:]]*//' | \
    awk '{print toupper($0)}' | \
    awk '{ gsub (" ", "_", $0); print}'
}


print_language_breakdown() {
    LANGUAGE_BREAKDOWN_STR=$(github-linguist)
    array=(`languages`)
    for i in $(languages)  #"${array[@]}"  # from 0--|lowest used lang|
    do
        j=$(echo $i | awk '{ gsub ("_", " ", $0); print}')
        k=$(echo $i | awk '{ gsub ("_", "", $0); print}')
        LANGINFO=$(echo "${LANGUAGE_BREAKDOWN_STR}" | egrep -i -- "$j"$ )  # ^.*
        echo -en "${!k}$LANGINFO${NORM}\n"  # the `${!k}` expands variables indirectly from colours defined above(http://mywiki.wooledge.org/BashFAQ/006#Indirection)
    done
}

# Options
while getopts ":csilh" OPTION; do
        case $OPTION in
                s)
                    # Prints what in repo has been altered since last commit + push
                    git status --short --branch   
                    ;;
                c)
                    # Prints commit count
                    echo -e "\033[1;38;5;2mYou have made $COMMIT_NUMBER_TODAY commits to $REPO_NAME/$BRANCH in the past 24 hours.\033[0;38m"
                    ;;
                i)
                    # Prints open issues
                    ghi list
                    ;;
                l)
                    # Prints language breakdown
                    print_language_breakdown
                    ;;
                h)
                    display_help
                    ;;
                \?)
                    echo -e "${HELP}" && exit $?
                    ;;
        esac
done


if [[ -z $1 ]] || [[ $1 =~ ^[-+]?[0-9]+$ ]]  # if first arg is empty or a positive integer
then # checks to see if my username is one of the usernames, and if so, prints it in a kind of sky blue colour
    git log --color --no-merges --pretty=format:\
"%C(bold yellow)%h%Creset -%C(bold green)%d%Creset %s %C(bold red)(%cr)%Creset %C(bold blue)<%an>%Creset" \
--abbrev-commit -$1$LOGNUMBER | perl -pe \
    ' if (/<([^>]*)>/)
        {
        if ( $1 eq "jakewilliami"  ||  $1 eq "Jake Ireland" )
            { s/<$1>/\e[0m\e[36m$&\e[39m\e[0m/; }
        else 
            { s/<$1>/\e[1m\e[34m$&\e[39m\e[0m/; } 
    } '
fi

# Clean up
if [[ JSON_FILE=TRUE ]]
then
    rm /Users/jakeireland/bin/scripts/bash/textcolours.txt
fi